{
	//# Alert #
	"alert test": {
		"prefix": "al_Test",
		"body": [
			"alert('${1:test} = ' + ${2:Param});"
		],
		"description": "Вывод чего либо в лог"
	},
	"alert tools.object_to_text": {
		"prefix": "al_t_ObjToTxt",
		"body": [
			"alert('${1:object} = ' + tools.object_to_text(${1:object}, 'json'));"
		],
		"description": "Преобразует массив или объект в строку и выводит в лог"
	},
	//# ############## #
	//# Встроенные функции #
		//## Преобразование типов данных ##
		"DataType": {
			"prefix": "f_DataType",
			"body": [
				"DataType(${1:arg})"
			],
			"description": "Возвращает тип аргумента <arg> (строка, число, объект и т.п.). Если в качестве аргумента задан объект любого типа, то функция возвращает значение 'object'."
		},
		"IsEmptyValue": {
			"prefix": "f_IsEmptyValue",
			"body": [
				"IsEmptyValue(${1:arg})"
			],
			"description": "Проверяет, имеет ли переменная значение undefined, null или пустая строкой. Позволяет писать универсальный код, не зная точный тип данных переданного аргумента. Действует начиная с версии 507."
		},
		"ObjectType": {
			"prefix": "f_ObjectType",
			"body": [
				"ObjectType(${1:obj})"
			],
			"description": "Возвращает тип объекта (массив, JS-объект, XmlElem и т.п.). Может использоваться вместе с функцией DataType, если DataType возвращает значение 'object'. Если аргумент имеет простой тип данных (строка, число, булево и т.д.), функция возвращает пустую строку."
		},
		"OptInt": {
			"prefix": "f_OptInt",
			"body": [
				"OptInt(${1:arg1}, ${2:defaultVal})"
			],
			"description": "Преобразует значение аргумента к целому неотрицательному числу (округление производится в меньшую сторону). Если основной аргумент не может быть преобразован к целому неотрицательному числу, функция возвращает второй аргумент (не обязательно числового типа) или значение undefined без прерывания выполняемого кода (если второй аргумент отсутствует)."
		},
		"OptReal": {
			"prefix": "f_OptReal",
			"body": [
				"OptReal(${1:arg1}, ${2:defaultVal})"
			],
			"description": " Преобразует значение аргумента к действительному числу. Если основной аргумент не может быть преобразован к действительному числу, функция возвращает второй аргумент (не обязательно числового типа) или значение undefined без прерывания выполняемого кода (если второй аргумент отсутствует)."
		},
		"RValue": {
			"prefix": "f_RValue",
			"body": [
				"RValue(${1:arg})"
			],
			"description": "Возвращает скалярное значение аргумента, если в качестве аргумента передан объект. Если передано скалярное значение, то функция возвращает то же самое значение. Может быть использована для отмены наследования при создании новых объектов на основе базовых."
		},
		"StrHexColor": {
			"prefix": "f_StrHexColor",
			"body": [
				"StrHexColor(${1:color})"
			],
			"description": "Преобразует десятеричное обозначение цвета (RGB-код) в шестнадцатеричное обозначение (HEX-код), принятое в формате HTML. Если аргумент не может быть преобразован к формату RGB-кода, функция выдает ошибку."
		},
		"StrHexInt": {
			"prefix": "f_StrHexInt",
			"body": [
				"StrHexInt(${1:arg})"
			],
			"description": "Преобразует значение аргумента в строку, содержащую значение в 16-значном 16-ричном формате (64 бита). Округление исходного значения производится в меньшую сторону. Если аргумент выходит за пределы допустимых значений или имеет формат строки, функция выдает ошибку."
		},
		"StrInt": {
			"prefix": "f_StrInt",
			"body": [
				"StrInt(${1:arg}, ${2:digitsNum}, ${3:addGroupDelim})"
			],
			"description": "Преобразует числовой аргумент в строку в целочисленном формате. Округление исходного значения производится в меньшую сторону. Данная функция также преобразует 16-ричное число в десятичное в строковом формате. Если аргумент не может быть преобразован к целому неотрицательному числу, функция выдает ошибку."
		},
		"StrIntZero": {
			"prefix": "f_StrIntZero",
			"body": [
				"StrIntZero(${1:arg}, ${2:digitsNum}, ${3:addGroupDelim})"
			],
			"description": "Преобразует числовой аргумент в строку в целочисленном формате (аналогично функции StrInt), но при нулевом аргументе (с учетом округления) возвращает значение '-'. Округление исходного значения производится в меньшую сторону. Если аргумент не может быть преобразован к целому неотрицательному числу, функция выдает ошибку."
		},
		"StrSignedInt": {
			"prefix": "f_StrSignedInt",
			"body": [
				"StrSignedInt(${1:arg}, ${2:digitsNum}, ${3:addGroupDelim})"
			],
			"description": "Преобразует числовой аргумент в строку, содержащую целое число со знаком. Округление исходного значения производится в меньшую сторону по модулю. Если первый аргумент не может быть преобразован к целому числу со знаком, функция выдает ошибку. Внимание! Если первый аргумент больше или равен 9223372036854775808, то использование функции приводит к некорректному результату."
		},
		"StrReal": {
			"prefix": "f_StrReal",
			"body": [
				"StrReal(${1:arg}, ${2:precision}, ${3:addGroupDelim})"
			],
			"description": "Преобразует в строку числовой аргумент в формате действительного числа. Производит округление до количества знаков, указанных во втором аргументе. Если аргумент не является действительным числом и не может быть преобразован к нему, функция выдает ошибку."
		},
		"StrRealFixed": {
			"prefix": "f_StrRealFixed",
			"body": [
				"StrRealFixed(${1:arg1}, ${2:iNum})"
			],
			"description": "Преобразует числовой аргумент в строку в формате действительного числа с фиксированным числом знаков в дробной части (с фиксированной точкой). Если аргумент не может быть преобразован к действительному числу с фиксированной точкой, функция выдает ошибку."
		},
		"TextInt": {
			"prefix": "f_TextInt",
			"body": [
				"TextInt(${1:arg}, ${2:gender})"
			],
			"description": "Преобразует числовое значение аргумента в словесное строковое представление (только для русскоязычной версии). Округление исходного значения производится в меньшую сторону. Если аргумент не может быть преобразован к целому неотрицательному числу, функция выдает ошибку."
		},
		//## ############ ##
		//## Преобразование форматов и кодировок ##
		"Base64Decode": {
			"prefix": "f_Base64Decode",
			"body": [
				"Base64Decode(${1:str})"
			],
			"description": "Декодирует данные из формата Base64. Возвращает строку, которая может содержать бинарные данные."
		},
		"Base64Encode": {
			"prefix": "f_Base64Encode",
			"body": [
				"Base64Encode(${1:str})"
			],
			"description": "Преобразует (кодирует) строку в формат Base64. Возвращает строку в формате Base64."
		},
		"DecodeCharset": {
			"prefix": "f_DecodeCharset",
			"body": [
				"DecodeCharset(${1:str}, ${2:charset})"
			],
			"description": "Преобразует строку из указанной кодировки в кодировку, используемую в программе по умолчанию. Возвращает строку в кодировке по умолчанию."
		},
		"EncodeCharset": {
			"prefix": "f_EncodeCharset",
			"body": [
				"EncodeCharset(${1:str}, ${2:charset})"
			],
			"description": "Преобразует строку из кодировки, используемой в программе по умолчанию, в указанную кодировку. Возвращает строку в указанной кодировке."
		},
		"EncodeJson": {
			"prefix": "f_EncodeJson",
			"body": [
				"EncodeJson(${1:arg1})"
			],
			"description": "Сериализация JavaScript-объекта (запись описания объекта в виде строки в формате JSON). Преобразует исходный объект в строку формата JSON. Действие функции обратно ParseJson."
		},
		"HexData": {
			"prefix": "f_HexData",
			"body": [
				"HexData(${1:arg})"
			],
			"description": "Преобразует исходную строку в посимвольное шестнадцатеричное представление. Возвращает строку, содержащую шестнадцатеричное представление исходной строки."
		},
		"HtmlEncode": {
			"prefix": "f_HtmlEncode",
			"body": [
				"HtmlEncode(${1:str})"
			],
			"description": "Преобразует текстовую строку в формат, используемый в HTML. В результате символы & , < и > заменяются на (&amp;), (&lt;) и (&gt;), а символ перевода строки - на <br>. Возвращает строку в формате HTML."
		},
		"HtmlEncodeDoc": {
			"prefix": "f_HtmlEncodeDoc",
			"body": [
				"HtmlEncodeDoc(${1:str})"
			],
			"description": "Преобразует строку, содержащую обычный текст, в полный HTML-документ. Функция формирует завершенный HTML-документ, содержащий теги <html>, <body> и др. Возвращает строку, содержащую HTML-документ."
		},
		"HtmlToPlainText": {
			"prefix": "f_HtmlToPlainText",
			"body": [
				"HtmlToPlainText(${1:html})"
			],
			"description": "Преобразует строку, содержащую текст в формате HTML, в обычный (неформатированный) текст. Функция удаляет теги и преобразует HTML-символы в обычные текстовые символы. Возвращает строку, содержащую неформатированный текст."
		},
		"MultipartFormEncode": {
			"prefix": "f_MultipartFormEncode",
			"body": [
				"MultipartFormEncode(${1:nameN}, ${2:valueN})"
			],
			"description": "Формирует тело http-запроса для последующей отправки методом POST в формате multipart/form-data на основе набора пар данных объекта «имя атрибута - значение». Возвращает строку http-запроса в формате multipart/form-data. Пример: MultipartFormEncode('key', '2233','event_id', Int(34566));"
		},
		"ParseJson": {
			"prefix": "f_ParseJson",
			"body": [
				"ParseJson(${1:jsonString})"
			],
			"description": "ParseJson – парсинг строки формата JSON (анализ и разбор строки и построение объекта по тому описанию, которое приведено в строке). Действие функции обратно EncodeJson."
		},
		"SqlLiteral": {
			"prefix": "f_SqlLiteral",
			"body": [
				"SqlLiteral(${1:arg})"
			],
			"description": "Преобразует исходное значение в константу (литерал) языка запросов SQL. Возвращает строку. Значение типа null переводится в строку 'NULL', значение типа Строка заключается в одинарные кавычки, значение типа Целое число переводится в соответствующее строковое значение, значение типа Вещественное число не преобразуется, значение типа Дата переводится в строку с датой и временем в формате SQL."
		},
		"StrSimpleDecrypt": {
			"prefix": "f_StrSimpleDecrypt",
			"body": [
				"StrSimpleDecrypt(${1:str})"
			],
			"description": "Дешифрует строку, зашифрованную встроенным алгоритмом. Возвращает строку в дешифрованном виде."
		},
		"StrSimpleEncrypt": {
			"prefix": "f_StrSimpleEncrypt",
			"body": [
				"StrSimpleEncrypt(${1:str})"
			],
			"description": "Шифрует строку встроенным алгоритмом шифрования. Возвращает строку в зашифрованном виде."
		},
		"UrlDecode": {
			"prefix": "f_UrlDecode",
			"body": [
				"UrlDecode(${1:str})"
			],
			"description": "Преобразует строку по стандартным правилам декодирования url, т.е. заменяет знак '%код' на соответствующий текстовый символ кириллицы. Возвращает строку с обычным текстом."
		},
		"UrlEncode": {
			"prefix": "f_UrlEncode",
			"body": [
				"UrlEncode(${1:str})"
			],
			"description": "Преобразует исходную текстовую строку по стандартным правилам кодирования для использования в качестве параметра URL."
		},
		"UrlEncode16": {
			"prefix": "f_UrlEncode16",
			"body": [
				"UrlEncode16(${1:str})"
			],
			"description": "Кодирует исходную текстовую строку для формирования параметра url, используя способ кодирования UTF-16."
		},
		"UrlEncodeQuery": {
			"prefix": "f_UrlEncodeQuery",
			"body": [
				"UrlEncodeQuery({'${1:nameN}': '${2:valueN}'})"
			],
			"description": "Преобразует набор пар данных объекта 'имя атрибута - значение' в строку вида 'name1=value1&name2=value2&...' для использования в качестве запроса в составе url."
		},
		"UrlEncodeQueryExt": {
			"prefix": "f_UrlEncodeQueryExt",
			"body": [
				"UrlEncodeQueryExt({'${1:nameN}': '${2:valueN}'})"
			],
			"description": "Преобразует набор пар данных объекта 'имя атрибута - значение' в строку вида 'name1=value1&name2=value2&...' в заданной кодировке для использования в качестве запроса в составе url."
		},
		"XmlAttrEncode": {
			"prefix": "f_XmlAttrEncode",
			"body": [
				"XmlAttrEncode(${1:str})"
			],
			"description": "Преобразует аргумент для вставки в xml в качестве значения атрибута. В результате действия функции выполняется замена ряда символов аргумента: - символ перевода строки преобразуется в &#10; - символ табуляции – в &#09; - символ & - в &lt; - символ < - в &amp; - символ двойных кавычек - в &quot;"
		},
		"XmlStr": {
			"prefix": "f_XmlStr",
			"body": [
				"XmlStr(${1:tag}, ${2:str})"
			],
			"description": "Добавляет к исходной строке xml-теги."
		},
		"XQueryLiteral": {
			"prefix": "f_XQueryLiteral",
			"body": [
				"XQueryLiteral(${1:arg})"
			],
			"description": "Преобразует исходное значение в константу (литерал) языка запросов XQuery, соответствующую типу исходного значения. Значение типа null переводится в строку 'null()'. Значение типа Строка заключается в одинарные кавычки, при этом существующие одинарные кавычки внутри строки преобразуются в двойные кавычки в соответствии с правилами языка XQuery. Значения типов Целое число и Вещественное число переводятся в соответствующие строковые выражения. Значение типа Булево переводится в строку 'true()' или 'false()'. Значение типа Дата переводится в строку, содержащую дату и время в формате языка XQuery."
		},	
		//## ############ ##
		//## Работа со строками ##
		"StrBegins": {
			"prefix": "f_StrBegins",
			"body": [
				"StrBegins(${1:str1}, ${2:str2}, ${3:ignoreCase})"
			],
			"description": "Производит проверку вхождения одной строки в начало другой строки (начинается ли строка 1 символами из строки 2)."
		},
		"StrCharCount": {
			"prefix": "f_StrCharCount",
			"body": [
				"StrCharCount(${1:str})"
			],
			"description": "Возвращает количество символов в строке."
		},
		"StrCharRangePos": {
			"prefix": "f_StrCharRangePos",
			"body": [
				"StrCharRangePos(${1:str}, ${2:pos1}, ${3:pos2})"
			],
			"description": "Возвращает часть строки от начального до конечного символа. Для определения части строки в байтах необходимо использовать функцию StrRangePos."
		},
		"StrContains": {
			"prefix": "f_StrContains",
			"body": [
				"StrContains(${1:str1}, ${2:str2}, ${3:ignoreCase})"
			],
			"description": "Проверяет, содержит ли строка другую строку в качестве подстроки. Возвращаемое значение: true или false"
		},
		"StrEnds": {
			"prefix": "f_StrEnds",
			"body": [
				"StrEnds(${1:str1}, ${2:str2}, ${3:ignoreCase})"
			],
			"description": "Производит проверку вхождения одной строки в конец другой строки (оканчивается ли строка 1 символами из строки 2). Возвращаемое значение: true или false"
		},
		"StrReplace": {
			"prefix": "f_StrReplace",
			"body": [
				"StrReplace(${1:str}, ${2:subStr}, ${3:newSubStr})"
			],
			"description": "Заменяет все вхождения одной подстроки на другую в исходной строке, если такие вхождения имеются."
		},
		"StrLowerCase": {
			"prefix": "f_StrLowerCase",
			"body": [
			"StrLowerCase(${1:str})"
			],
			"description": "Переводит все символы строки в нижний регистр."
		},
		//## ############ ##
	//# ############## #
	
	
	
	"ArrayCount": {
		"prefix": "f_ArrayCount",
		"body": [
			"ArrayCount(${1:array})"
		],
		"description": "Возвращает количество элементов массива"
	},
	"ArrayMerge": {
		"prefix": "f_ArrayMerge",
		"body": [
			"ArrayMerge(${1:array}, '${2:sArrElem}', '${3:;}')"
		],
		"description": "Возвращает строку, полученную путем соединения данных из элементов массива."
	},
	"ObtainChildByKey": {
		"prefix": "f_ObtainChildByKey",
		"body": [
			"custom_elems.ObtainChildByKey('${1:sChildElemName}').value"
		],
		"description": "Проверяет наличие элемента с указанным ключем и добавляет таковой в случае его отсутствия (Используется в основном чтобы записать значение в дочерний элемент / кастомное поле)"
	},
	"GetOptChildByKey": {
		"prefix": "f_GetOptChildByKey",
		"body": [
			"custom_elems.GetOptChildByKey('${1:sChildElemName}', ${2:defaultVal}).value"
		],
		"description": "Получить значение дочернего элемента / кастомного поля по ключу"
	},
	//# ############## #
	//# tools #
	"tools.object_to_text": {
		"prefix": "t_ObjToTxt",
		"body": [
			"tools.object_to_text(${1:object}, 'json')"
		],
		"description": "Преобразует массив или объект в строку"
	},
	"tools.create_notification": {
		"prefix": "t_CreateNotif",
		"body": [
			"tools.create_notification('${1:sCodeTypeNotif}', ${2:iPersonID}, '${3:sTextNotif}', ${4:iSecondObjectID})"
		],
		"description": "Создает новое неотправленное уведомление"
	},
	"tools_web.get_web_param": {
		"prefix": "t_w_GetWebParam",
		"body": [
			"tools_web.get_web_param(curParams, '${1:sWebParam}', '', true)"
		],
		"description": "Получаем значение из переменной шаблона/раздела портала"
	},
	"tools.open_doc": {
		"prefix": "t_OpenDoc",
		"body": [
			"tools.open_doc(${1:iDocID})"
		],
		"description": "Открывает XML-документ по указанному ID объекта"
	},
	"tools.read_object": {
		"prefix": "t_ReadObj",
		"body": [
			"tools.read_object(${1:sObj})"
		],
		"description": "Преобразует строку в формате json в объект"
	},
	"tools.call_code_library_method": {
		"prefix": "t_CallLib",
		"body": [
			"tools.call_code_library_method('${1:sCodeLib}', '${2:sMethodName}', [${3:Param1}, ${4:Param2}])"
		],
		"description": "Вызов метода из библиотеки программного кода"
	},
	//# ############## #
	//# XAML #
	"htmlbox": {
		"prefix": "xaml_HtmlBox",
		"body": [
			"HTMLBox Dynamic=\"true\">",
			"	<![CDATA[",
			"		$1",
			"	]]>",
			"</HTMLBox>"
		],
		"description": "XAML разметка, Отображает HTML код"
	},
	//# ############## #
	//# Other WT #
	"wt_sql_request": {
		"prefix": "wt_SqlRequest",
		"body": [
			"${1:sSqlReq} = \"",
			"	$2",
			"\";",
			"${3:arrResult} = ArraySelectAll(XQuery(\"sql: \" + ${1:sSqlReq}));"
		],
		"description": "Конструкция для SQL запроса"
	},
	"wt_forin": {
		"prefix": "wt_forin",
		"body": [
			"for (${2:arrElem} in ${1:arrResult}) ",
			"{",
			"	$3",
			"}"
		],
		"description": "Конструкция for in"
	},
	"TopElem": {
		"prefix": "wt_TopElem",
		"body": [
			"${2:doc} = tools.open_doc(${1:iDocID});",
			"${3:teDoc} = ${2:doc}.TopElem;"
		],
		"description": "Возвращает корневой элемент в документе"
	}
	//# ############## #
}
