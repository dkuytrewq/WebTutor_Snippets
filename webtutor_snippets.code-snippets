{
    //# Alert #
    "alert test": {
        "prefix": "al_Test",
        "body": [
            "alert('${1:test} = ' + ${2:Param});"
        ],
        "description": "Вывод чего либо в лог"
    },
    "alert tools.object_to_text": {
        "prefix": "al_t_ObjToTxt",
        "body": [
            "alert('${1:object} = ' + tools.object_to_text(${1:object}, 'json'));"
        ],
        "description": "Преобразует массив или объект в строку и выводит в лог"
    },
    //# ############## #
    //# Встроенные функции #
        //## Преобразование типов данных ##
        "DataType": {
            "prefix": "f_DataType",
            "body": [
                "DataType(${1:arg})"
            ],
            "description": "Возвращает тип аргумента <arg> (строка, число, объект и т.п.). Если в качестве аргумента задан объект любого типа, то функция возвращает значение 'object'."
        },
        "IsEmptyValue": {
            "prefix": "f_IsEmptyValue",
            "body": [
                "IsEmptyValue(${1:arg})"
            ],
            "description": "Проверяет, имеет ли переменная значение undefined, null или пустая строкой. Позволяет писать универсальный код, не зная точный тип данных переданного аргумента. Действует начиная с версии 507."
        },
        "ObjectType": {
            "prefix": "f_ObjectType",
            "body": [
                "ObjectType(${1:obj})"
            ],
            "description": "Возвращает тип объекта (массив, JS-объект, XmlElem и т.п.). Может использоваться вместе с функцией DataType, если DataType возвращает значение 'object'. Если аргумент имеет простой тип данных (строка, число, булево и т.д.), функция возвращает пустую строку."
        },
        "OptInt": {
            "prefix": "f_OptInt",
            "body": [
                "OptInt(${1:arg1}, ${2:defaultVal})"
            ],
            "description": "Преобразует значение аргумента к целому неотрицательному числу (округление производится в меньшую сторону). Если основной аргумент не может быть преобразован к целому неотрицательному числу, функция возвращает второй аргумент (не обязательно числового типа) или значение undefined без прерывания выполняемого кода (если второй аргумент отсутствует)."
        },
        "OptReal": {
            "prefix": "f_OptReal",
            "body": [
                "OptReal(${1:arg1}, ${2:defaultVal})"
            ],
            "description": " Преобразует значение аргумента к действительному числу. Если основной аргумент не может быть преобразован к действительному числу, функция возвращает второй аргумент (не обязательно числового типа) или значение undefined без прерывания выполняемого кода (если второй аргумент отсутствует)."
        },
        "RValue": {
            "prefix": "f_RValue",
            "body": [
                "RValue(${1:arg})"
            ],
            "description": "Возвращает скалярное значение аргумента, если в качестве аргумента передан объект. Если передано скалярное значение, то функция возвращает то же самое значение. Может быть использована для отмены наследования при создании новых объектов на основе базовых."
        },
        "StrHexColor": {
            "prefix": "f_StrHexColor",
            "body": [
                "StrHexColor(${1:color})"
            ],
            "description": "Преобразует десятеричное обозначение цвета (RGB-код) в шестнадцатеричное обозначение (HEX-код), принятое в формате HTML. Если аргумент не может быть преобразован к формату RGB-кода, функция выдает ошибку."
        },
        "StrHexInt": {
            "prefix": "f_StrHexInt",
            "body": [
                "StrHexInt(${1:arg})"
            ],
            "description": "Преобразует значение аргумента в строку, содержащую значение в 16-значном 16-ричном формате (64 бита). Округление исходного значения производится в меньшую сторону. Если аргумент выходит за пределы допустимых значений или имеет формат строки, функция выдает ошибку."
        },
        "StrInt": {
            "prefix": "f_StrInt",
            "body": [
                "StrInt(${1:arg}, ${2:digitsNum}, ${3:addGroupDelim})"
            ],
            "description": "Преобразует числовой аргумент в строку в целочисленном формате. Округление исходного значения производится в меньшую сторону. Данная функция также преобразует 16-ричное число в десятичное в строковом формате. Если аргумент не может быть преобразован к целому неотрицательному числу, функция выдает ошибку."
        },
        "StrIntZero": {
            "prefix": "f_StrIntZero",
            "body": [
                "StrIntZero(${1:arg}, ${2:digitsNum}, ${3:addGroupDelim})"
            ],
            "description": "Преобразует числовой аргумент в строку в целочисленном формате (аналогично функции StrInt), но при нулевом аргументе (с учетом округления) возвращает значение '-'. Округление исходного значения производится в меньшую сторону. Если аргумент не может быть преобразован к целому неотрицательному числу, функция выдает ошибку."
        },
        "StrSignedInt": {
            "prefix": "f_StrSignedInt",
            "body": [
                "StrSignedInt(${1:arg}, ${2:digitsNum}, ${3:addGroupDelim})"
            ],
            "description": "Преобразует числовой аргумент в строку, содержащую целое число со знаком. Округление исходного значения производится в меньшую сторону по модулю. Если первый аргумент не может быть преобразован к целому числу со знаком, функция выдает ошибку. Внимание! Если первый аргумент больше или равен 9223372036854775808, то использование функции приводит к некорректному результату."
        },
        "StrReal": {
            "prefix": "f_StrReal",
            "body": [
                "StrReal(${1:arg}, ${2:precision}, ${3:addGroupDelim})"
            ],
            "description": "Преобразует в строку числовой аргумент в формате действительного числа. Производит округление до количества знаков, указанных во втором аргументе. Если аргумент не является действительным числом и не может быть преобразован к нему, функция выдает ошибку."
        },
        "StrRealFixed": {
            "prefix": "f_StrRealFixed",
            "body": [
                "StrRealFixed(${1:arg1}, ${2:iNum})"
            ],
            "description": "Преобразует числовой аргумент в строку в формате действительного числа с фиксированным числом знаков в дробной части (с фиксированной точкой). Если аргумент не может быть преобразован к действительному числу с фиксированной точкой, функция выдает ошибку."
        },
        "TextInt": {
            "prefix": "f_TextInt",
            "body": [
                "TextInt(${1:arg}, ${2:gender})"
            ],
            "description": "Преобразует числовое значение аргумента в словесное строковое представление (только для русскоязычной версии). Округление исходного значения производится в меньшую сторону. Если аргумент не может быть преобразован к целому неотрицательному числу, функция выдает ошибку."
        },
        //## ############ ##
        //## Преобразование форматов и кодировок ##
        "Base64Decode": {
            "prefix": "f_Base64Decode",
            "body": [
                "Base64Decode(${1:str})"
            ],
            "description": "Декодирует данные из формата Base64. Возвращает строку, которая может содержать бинарные данные."
        },
        "Base64Encode": {
            "prefix": "f_Base64Encode",
            "body": [
                "Base64Encode(${1:str})"
            ],
            "description": "Преобразует (кодирует) строку в формат Base64. Возвращает строку в формате Base64."
        },
        "DecodeCharset": {
            "prefix": "f_DecodeCharset",
            "body": [
                "DecodeCharset(${1:str}, ${2:charset})"
            ],
            "description": "Преобразует строку из указанной кодировки в кодировку, используемую в программе по умолчанию. Возвращает строку в кодировке по умолчанию."
        },
        "EncodeCharset": {
            "prefix": "f_EncodeCharset",
            "body": [
                "EncodeCharset(${1:str}, ${2:charset})"
            ],
            "description": "Преобразует строку из кодировки, используемой в программе по умолчанию, в указанную кодировку. Возвращает строку в указанной кодировке."
        },
        "EncodeJson": {
            "prefix": "f_EncodeJson",
            "body": [
                "EncodeJson(${1:arg1})"
            ],
            "description": "Сериализация JavaScript-объекта (запись описания объекта в виде строки в формате JSON). Преобразует исходный объект в строку формата JSON. Действие функции обратно ParseJson."
        },
        "HexData": {
            "prefix": "f_HexData",
            "body": [
                "HexData(${1:arg})"
            ],
            "description": "Преобразует исходную строку в посимвольное шестнадцатеричное представление. Возвращает строку, содержащую шестнадцатеричное представление исходной строки."
        },
        "HtmlEncode": {
            "prefix": "f_HtmlEncode",
            "body": [
                "HtmlEncode(${1:str})"
            ],
            "description": "Преобразует текстовую строку в формат, используемый в HTML. В результате символы & , < и > заменяются на (&amp;), (&lt;) и (&gt;), а символ перевода строки - на <br>. Возвращает строку в формате HTML."
        },
        "HtmlEncodeDoc": {
            "prefix": "f_HtmlEncodeDoc",
            "body": [
                "HtmlEncodeDoc(${1:str})"
            ],
            "description": "Преобразует строку, содержащую обычный текст, в полный HTML-документ. Функция формирует завершенный HTML-документ, содержащий теги <html>, <body> и др. Возвращает строку, содержащую HTML-документ."
        },
        "HtmlToPlainText": {
            "prefix": "f_HtmlToPlainText",
            "body": [
                "HtmlToPlainText(${1:html})"
            ],
            "description": "Преобразует строку, содержащую текст в формате HTML, в обычный (неформатированный) текст. Функция удаляет теги и преобразует HTML-символы в обычные текстовые символы. Возвращает строку, содержащую неформатированный текст."
        },
        "MultipartFormEncode": {
            "prefix": "f_MultipartFormEncode",
            "body": [
                "MultipartFormEncode(${1:nameN}, ${2:valueN})"
            ],
            "description": "Формирует тело http-запроса для последующей отправки методом POST в формате multipart/form-data на основе набора пар данных объекта «имя атрибута - значение». Возвращает строку http-запроса в формате multipart/form-data. Пример: MultipartFormEncode('key', '2233','event_id', Int(34566));"
        },
        "ParseJson": {
            "prefix": "f_ParseJson",
            "body": [
                "ParseJson(${1:jsonString})"
            ],
            "description": "ParseJson – парсинг строки формата JSON (анализ и разбор строки и построение объекта по тому описанию, которое приведено в строке). Действие функции обратно EncodeJson."
        },
        "SqlLiteral": {
            "prefix": "f_SqlLiteral",
            "body": [
                "SqlLiteral(${1:arg})"
            ],
            "description": "Преобразует исходное значение в константу (литерал) языка запросов SQL. Возвращает строку. Значение типа null переводится в строку 'NULL', значение типа Строка заключается в одинарные кавычки, значение типа Целое число переводится в соответствующее строковое значение, значение типа Вещественное число не преобразуется, значение типа Дата переводится в строку с датой и временем в формате SQL."
        },
        "StrSimpleDecrypt": {
            "prefix": "f_StrSimpleDecrypt",
            "body": [
                "StrSimpleDecrypt(${1:str})"
            ],
            "description": "Дешифрует строку, зашифрованную встроенным алгоритмом. Возвращает строку в дешифрованном виде."
        },
        "StrSimpleEncrypt": {
            "prefix": "f_StrSimpleEncrypt",
            "body": [
                "StrSimpleEncrypt(${1:str})"
            ],
            "description": "Шифрует строку встроенным алгоритмом шифрования. Возвращает строку в зашифрованном виде."
        },
        "UrlDecode": {
            "prefix": "f_UrlDecode",
            "body": [
                "UrlDecode(${1:str})"
            ],
            "description": "Преобразует строку по стандартным правилам декодирования url, т.е. заменяет знак '%код' на соответствующий текстовый символ кириллицы. Возвращает строку с обычным текстом."
        },
        "UrlEncode": {
            "prefix": "f_UrlEncode",
            "body": [
                "UrlEncode(${1:str})"
            ],
            "description": "Преобразует исходную текстовую строку по стандартным правилам кодирования для использования в качестве параметра URL."
        },
        "UrlEncode16": {
            "prefix": "f_UrlEncode16",
            "body": [
                "UrlEncode16(${1:str})"
            ],
            "description": "Кодирует исходную текстовую строку для формирования параметра url, используя способ кодирования UTF-16."
        },
        "UrlEncodeQuery": {
            "prefix": "f_UrlEncodeQuery",
            "body": [
                "UrlEncodeQuery({'${1:nameN}': '${2:valueN}'})"
            ],
            "description": "Преобразует набор пар данных объекта 'имя атрибута - значение' в строку вида 'name1=value1&name2=value2&...' для использования в качестве запроса в составе url."
        },
        "UrlEncodeQueryExt": {
            "prefix": "f_UrlEncodeQueryExt",
            "body": [
                "UrlEncodeQueryExt({'${1:nameN}': '${2:valueN}'})"
            ],
            "description": "Преобразует набор пар данных объекта 'имя атрибута - значение' в строку вида 'name1=value1&name2=value2&...' в заданной кодировке для использования в качестве запроса в составе url."
        },
        "XmlAttrEncode": {
            "prefix": "f_XmlAttrEncode",
            "body": [
                "XmlAttrEncode(${1:str})"
            ],
            "description": "Преобразует аргумент для вставки в xml в качестве значения атрибута. В результате действия функции выполняется замена ряда символов аргумента: - символ перевода строки преобразуется в &#10; - символ табуляции – в &#09; - символ & - в &lt; - символ < - в &amp; - символ двойных кавычек - в &quot;"
        },
        "XmlStr": {
            "prefix": "f_XmlStr",
            "body": [
                "XmlStr(${1:tag}, ${2:str})"
            ],
            "description": "Добавляет к исходной строке xml-теги."
        },
        "XQueryLiteral": {
            "prefix": "f_XQueryLiteral",
            "body": [
                "XQueryLiteral(${1:arg})"
            ],
            "description": "Преобразует исходное значение в константу (литерал) языка запросов XQuery, соответствующую типу исходного значения. Значение типа null переводится в строку 'null()'. Значение типа Строка заключается в одинарные кавычки, при этом существующие одинарные кавычки внутри строки преобразуются в двойные кавычки в соответствии с правилами языка XQuery. Значения типов Целое число и Вещественное число переводятся в соответствующие строковые выражения. Значение типа Булево переводится в строку 'true()' или 'false()'. Значение типа Дата переводится в строку, содержащую дату и время в формате языка XQuery."
        },	
        //## ############ ##
        //## Работа со строками ##
        "StrBegins": {
            "prefix": "f_StrBegins",
            "body": [
                "StrBegins(${1:str1}, ${2:str2}, ${3:ignoreCase})"
            ],
            "description": "Производит проверку вхождения одной строки в начало другой строки (начинается ли строка 1 символами из строки 2)."
        },
        "StrCharCount": {
            "prefix": "f_StrCharCount",
            "body": [
                "StrCharCount(${1:str})"
            ],
            "description": "Возвращает количество символов в строке."
        },
        "StrCharRangePos": {
            "prefix": "f_StrCharRangePos",
            "body": [
                "StrCharRangePos(${1:str}, ${2:pos1}, ${3:pos2})"
            ],
            "description": "Возвращает часть строки от начального до конечного символа. Для определения части строки в байтах необходимо использовать функцию StrRangePos."
        },
        "StrContains": {
            "prefix": "f_StrContains",
            "body": [
                "StrContains(${1:str1}, ${2:str2}, ${3:ignoreCase})"
            ],
            "description": "Проверяет, содержит ли строка другую строку в качестве подстроки. Возвращаемое значение: true или false"
        },
        "StrEnds": {
            "prefix": "f_StrEnds",
            "body": [
                "StrEnds(${1:str1}, ${2:str2}, ${3:ignoreCase})"
            ],
            "description": "Производит проверку вхождения одной строки в конец другой строки (оканчивается ли строка 1 символами из строки 2). Возвращаемое значение: true или false"
        },
        "StrFromCharCode": {
            "prefix": "f_StrFromCharCode",
            "body": [
                "StrFromCharCode(${1:data})"
            ],
            "description": "Функция StrFromCharCode преобразует код символа (число) в строку, содержащую этот символ. Возвращаемое значение: строка"
        },
        "StrFromCharCodesArray": {
            "prefix": "f_StrFromCharCodesArray",
            "body": [
                "StrFromCharCodesArray(${1:arrData})"
            ],
            "description": "Функция StrFromCharCodesArray преобразует массив кодов в строку. Для каждого элемента массива чисел определяется соответствующий символ, и затем все символы объединяются в строку. Возвращаемое значение: строка"
        },
        "StrIsAlphaNum": {
            "prefix": "f_StrIsAlphaNum",
            "body": [
                "StrIsAlphaNum(${1:str})"
            ],
            "description": "Проверяет, состоит ли строка только из цифр или символов латинского алфавита. Возвращаемое значение: true или false"
        },
        "StrLeftCharRange": {
            "prefix": "f_StrLeftCharRange",
            "body": [
                "StrLeftCharRange(${1:str}, ${2:length})"
            ],
            "description": "Возвращает часть строки, длиной length символов, начиная с первого символа. Если второй аргумент больше количества символов в строке, то исходная строка возвращается полностью. Возвращаемое значение: строка"
        },
        "StrLeftRange": {
            "prefix": "f_StrLeftRange",
            "body": [
                "StrLeftRange(${1:str}, ${2:length})"
            ],
            "description": "Возвращает часть исходной строки str длиной length байтов, начиная с первого байта. Если второй аргумент больше длины исходной строки в байтах, то исходная строка возвращается полностью. Возвращаемое значение: строка"
        },
        "StrLen": {
            "prefix": "f_StrLen",
            "body": [
                "StrLen(${1:str})"
            ],
            "description": "Возвращает длину строки в байтах. Длина строки в байтах может быть больше количества символов, если программа использует кодировку UTF-8. Возвращаемое значение: целое число"
        },
        "StrLowerCase": {
            "prefix": "f_StrLowerCase",
            "body": [
                "StrLowerCase(${1:str})"
            ],
            "description": "Переводит все символы строки в нижний регистр. Возвращаемое значение: строка"
        },
        "StrMatchesMultiPattern": {
            "prefix": "f_StrMatchesMultiPattern",
            "body": [
                "StrMatchesMultiPattern(${1:str}, ${2:pattern})"
            ],
            "description": "Функция аналогична StrMatchesPattern, но может выполнять поиск по нескольким маскам, включенным в шаблон. Маски перечисляются в шаблоне через запятую. Маска поиска использует символы '*', заменяющие любое количество любых символов. Например, маске поиска 'aaa*bbb' соответствуют следующие сочетания символов в составе исходной строки: 'aaacccbbb', 'aaa bbb', 'aaaabcdebbb' и т.д. Возвращаемое значение: true или false"
        },
        "StrMatchesPattern": {
            "prefix": "f_StrMatchesPattern",
            "body": [
                "StrMatchesPattern(${1:str}, ${2:mask})"
            ],
            "description": "Проверяет, содержит ли строка другую строку в качестве подстроки с учетом маски поиска, использующей символы '*', которые заменяют любое количество любых символов. Например, маске поиска 'aaa*bbb' соответствуют следующие сочетания символов в составе исходной строки: 'aaacccbbb', 'aaa bbb', 'aaaabcdebbb' и т.д. Возвращаемое значение: true или false"
        },
        "StrNonTitleCase": {
            "prefix": "f_StrNonTitleCase",
            "body": [
                "StrNonTitleCase(${1:str})"
            ],
            "description": "Преобразует первую букву строки к нижнему регистру. Если строка уже приведена к описанному виду или если она не может быть приведена к такому виду, то строка возвращается без изменений. Возвращаемое значение: строка"
        },
        "StrOptScan": {
            "prefix": "f_StrOptScan",
            "body": [
                "StrOptScan(${1:str}, ${2:template})"
            ],
            "description": "Функция извлекает из исходной строки фрагменты в соответствии с заданным шаблоном. Если в исходной строке отсутствуют какие-либо фрагменты, соответствующие шаблону, функция возвращает значение undefined. Возвращаемое значение: массив строк или undefined"
        },
        "StrRangePos": {
            "prefix": "f_StrRangePos",
            "body": [
                "StrRangePos(${1:str}, ${2:pos1}, ${3:pos2})"
            ],
            "description": "Возвращает часть строки от начального до конечного байта. Примечание: длина строки в байтах может быть больше количества символов, если программа использует кодировку UTF-8. Возвращаемое значение: строка, содержащая часть исходной строки от начального до конечного байта."
        },
        "StrReplace": {
            "prefix": "f_StrReplace",
            "body": [
                "StrReplace(${1:str}, ${2:subStr}, ${3:newSubStr})"
            ],
            "description": "Заменяет все вхождения одной подстроки на другую в исходной строке, если такие вхождения имеются. Возвращаемое значение: измененная строка."
        },
        "StrReplaceOne": {
            "prefix": "f_StrReplaceOne",
            "body": [
                "StrReplaceOne(${1:str}, ${2:subStr}, ${3:newSubStr})"
            ],
            "description": "Заменяет первое вхождение одной подстроки на другую в исходной строке, если такие вхождения имеются. Возвращаемое значение: измененная строка."
        },
        "StrRightRangePos": {
            "prefix": "f_StrRightRangePos",
            "body": [
                "StrRightRangePos(${1:str}, ${2:pos})"
            ],
            "description": "Возвращает часть исходной строки, начиная с указанного байта. Примечание - Длина строки в байтах может быть больше количества символов, если программа использует кодировку UTF-8. Возвращаемое значение: измененная строка."
        },
        "StrScan": {
            "prefix": "f_StrScan",
            "body": [
                "StrScan(${1:str}, ${2:template})"
            ],
            "description": "Извлекает из исходной строки фрагменты в соответствии с заданным шаблоном. Шаблоны могут содержать элементы: %s - вхождение подстроки (возвращаемое); %*s - вхождение подстроки (невозвращаемое). Если какие-либо фрагменты, соответствующие шаблону, в исходной строке отсутствуют, функция возвращает ошибку с прерыванием выполняемого кода. Возвращает массив строк, элементами которого являются отобранные фрагменты исходной строки."
        },
        "StrSplitToLines": {
            "prefix": "f_StrSplitToLines",
            "body": [
                "StrSplitToLines(${1:str})"
            ],
            "description": "Преобразует строку в массив абзацев, разделенных символами '\\n'. Возвращает массив строк, каждый элемент которого является абзацем из исходной строки."
        },
        "StrTitleCase": {
            "prefix": "f_StrTitleCase",
            "body": [
                "StrTitleCase(${1:str})"
            ],
            "description": "Преобразует первую букву строки в заглавную. Если строка уже приведена к описанному виду или если она не может быть приведена к такому виду, то строка возвращается без изменений. Примечание – В ряде версий (например, 2019.2.3) функция StrTitleCase преобразует к нижнему регистру все строковые символы, кроме первого. Возвращает строку, первый символ которой преобразован к верхнему регистру, а остальные символы – к нижнему регистру."
        },
        "StrToCharArray": {
            "prefix": "f_StrToCharArray",
            "body": [
                "StrToCharArray(${1:str})"
            ],
            "description": "Функция StrToCharArray преобразует строку в массив символов (по одному символу в каждом элементе массива). Возвращает массив символов, где каждый элемент массива представляет собой один символ из исходной строки."
        },
        "StrToCharCodesArray": {
            "prefix": "f_StrToCharCodesArray",
            "body": [
                "StrToCharCodesArray(${1:str})"
            ],
            "description": "Функция StrToCharCodesArray преобразует строку в массив кодов символов (строка разбивается на символы, по каждому из которых определяется соответствующий код CharCode). Возвращает массив целых чисел, представляющих коды символов, из которых состоит исходная строка."
        },
        "StrUpperCase": {
            "prefix": "f_StrUpperCase",
            "body": [
                "StrUpperCase(${1:str})"
            ],
            "description": "Функция StrUpperCase переводит все символы строки в верхний регистр. Возвращает строку, преобразованную к верхнему регистру."
        },
        "Trim": {
            "prefix": "f_Trim",
            "body": [
                "Trim(${1:str})"
            ],
            "description": "Функция Trim удаляет символы пробела, перевода строк и табуляции в начале и в конце исходной строки. Возвращает копию исходной строки, из которой удалены указанные символы в начале и в конце."
        },
        "UnifySpaces": {
            "prefix": "f_UnifySpaces",
            "body": [
                "UnifySpaces(${1:str})"
            ],
            "description": "Заменяет повторяющиеся последовательности символов пробела, перевода строк и табуляции в строке на одиночные пробелы. Если указанные повторяющиеся последовательности символов в исходной строке отсутствуют, то функция возвращает исходную строку без изменения."
        },
        //## ############ ##
        //## Работа с датами ##
        "Date": {
            "prefix": "f_Date",
            "body": [
                "Date(${1:str})"
            ],
            "description": "Преобразует строку, содержащую дату или дату и время, в объект типа Дата (это специальный объект (структура) даты).Если исходная строка содержит данные, отличные от указанных, то функция возвращает ошибку с прерыванием выполняемого кода.Если аргумент не указан, то функция возвращает текущую дату.Если аргумент содержит данное типа Дата, то функция возвращает его без изменений.Возвращаемое значение: Тип: Объект типа Дата."
        },
        "DateDiff": {
            "prefix": "f_DateDiff",
            "body": [
                "DateDiff(${1:date1}, ${2:date2})"
            ],
            "description": "Возвращает разность между первой и второй датами в секундах.Возвращаемое значение: Тип: Целое число. Разность между первой и второй датами в секундах."
        },
        "DateNewTime": {
            "prefix": "f_DateNewTime",
            "body": [
                "DateNewTime(${1:date}, ${2:hours}, ${3:minutes}, ${4:seconds})"
            ],
            "description": "Изменяет исходную дату с учетом заданного времени (часов, минут и секунд). Если указан только первый аргумент, функция возвращает дату без указания времени.Возвращаемое значение: Тип: Дата. Измененная дата. При наличии аргументов «hours, minutes» или «hours, minutes, seconds» функция возвращает исходную дату с учетом заданного времени (часов, минут и секунд)."
        },
        "DateOffset": {
            "prefix": "f_DateOffset",
            "body": [
                "DateOffset(${1:date}, ${2:seconds})"
            ],
            "description": "Сдвигает дату на указанное число секунд. Если значение второго аргумента отрицательное, дата сдвигается назад. Примечание. Для информации - 1 сутки = 86400 секунд; 1 час = 3600 секунд; 1 минута = 60 секунд.Возвращаемое значение: Тип: Дата. Измененная дата."
        },
        "DateToRawSeconds": {
            "prefix": "f_DateToRawSeconds",
            "body": [
                "DateToRawSeconds(${1:date})"
            ],
            "description": "Возвращает количество секунд, прошедших с даты '01.01.1970 03:00:00', до заданной даты.Пример: A1 = Date ('01.01.1970 03:00:10'); A2 = DateToRawSeconds (A1); alert (A2); // возвращает число 10"
        },
        "Day": {
            "prefix": "f_Day",
            "body": [
                "Day(${1:date})"
            ],
            "description": "Возвращает номер дня в месяце (от 1 до 31) для заданной даты.Возвращаемое значение: Тип: Целое число. Номер дня (от 1 до 31)."
        },
        "GetCurTicks": {
            "prefix": "f_GetCurTicks",
            "body": [
                "GetCurTicks()"
            ],
            "description": "Функция вызывается без аргументов. Возвращает время в миллисекундах, прошедшее с момента запуска операционной системы.Возвращаемое значение: Тип: Целое число. Время в миллисекундах от момента запуска операционной системы."
        },
        "Hour": {
            "prefix": "f_Hour",
            "body": [
                "Hour(${1:date})"
            ],
            "description": "Возвращает количество часов (от 0 до 23) в заданной дате. Если дата не содержит времени, то функция возвращает значение undefined.Возвращаемое значение: Тип: Целое число. Количество часов (от 0 до 23). Если дата не содержит времени, то функция возвращает значение undefined."
        },
        "Minute": {
            "prefix": "f_Minute",
            "body": [
                "Minute(${1:date})"
            ],
            "description": "Возвращает количество минут (от 0 до 59) для заданной даты. Если дата не содержит времени, то функция возвращает значение undefined.Возвращаемое значение: Тип: Целое число. Количество минут (от 0 до 59). Если дата не содержит времени, то функция возвращает значение undefined."
        },
        "Month": {
            "prefix": "f_Month",
            "body": [
                "Month(${1:date})"
            ],
            "description": "Возвращает номер месяца в году (от 1 до 12) для заданной даты.Возвращаемое значение: Тип: Целое число. Номер дня (от 1 до 12)."
        },
        "OptDate": {
            "prefix": "f_OptDate",
            "body": [
                "OptDate(${1:year}, ${2:month}, ${3:day}, ${4:hours}, ${5:minutes}, ${6:seconds})"
            ],
            "description": "Преобразует строку, содержащую дату или дату и время, в объект типа Дата.Данная функция аналогична функции Date, но имеет перед функцией Date ряд преимуществ:1) В случае, если указаны недопустимые аргументы, функция возвращает значение undefined.2) Функция OptDate() проверяет корректность даты (например, 29 февраля). Допустимые варианты использования:OptDate ( 2019, 04, 20 )OptDate ( 2019, 04, 20, 12, 30 )OptDate ( 2019, 04, 20, 12, 30, 0 ) Если аргумент не указан, то функция возвращает текущую дату.Если аргумент содержит данное типа Дата, то функция возвращает его без изменений.Возвращаемое значение: Тип: Дата."
        },
        "ParseDate": {
            "prefix": "f_ParseDate",
            "body": [
                "ParseDate(${1:str})"
            ],
            "description": "Преобразует строку, содержащую дату или дату и время, в значение типа Дата.Данная функция аналогична функции Date, но преобразует строку не в объект (структуру), а в значение типа Дата.В отличие от функции Date данная функция принимает в качестве аргумента дату со словесным указанием месяца, например, '1 ноября 2011 года' Допустимые варианты использования:ParseDate ('1 ноября 2011 года')ParseDate ('01.11.2011')ParseDate ('2011-11-01')Возвращаемое значение: Тип: Дата."
        },
        "RawSecondsToDate": {
            "prefix": "f_RawSecondsToDate",
            "body": [
                "RawSecondsToDate(${1:seconds})"
            ],
            "description": "Преобразует количество секунд, прошедших с даты '01.01.1970 03:00:00', в результирующую дату.Возвращаемое значение: Тип: Дата. Результирующая дата."
        },
        "Second": {
            "prefix": "f_Second",
            "body": [
                "Second(${1:date})"
            ],
            "description": "Возвращает количество секунд (от 0 до 59) для заданной даты. Если дата не содержит времени, то функция возвращает значение 0.Возвращаемое значение: Тип: Целое число. Количество секунд (от 0 до 59). Если дата не содержит времени, то функция возвращает значение 0."
        },
        "StrDate": {
            "prefix": "f_StrDate",
            "body": [
                "StrDate(${1:date}, ${2:showTime}, ${3:showSeconds})"
            ],
            "description": "Преобразует дату в строку в формате, используемом по умолчанию в операционной системе.Если в качестве аргумента передается null или пустая строка, функция возвращает пустую строку.Возвращаемое значение: Тип: Строка. Строка, содержащая исходную дату."
        },
        "StrLongDate": {
            "prefix": "f_StrLongDate",
            "body": [
                "StrLongDate(${1:date})"
            ],
            "description": "Преобразует дату в строку в «длинном» формате (со словесной формой отображения месяца).Если в качестве аргумента передается null или пустая строка, функция возвращает пустую строку.Возвращаемое значение: Тип: Строка. Строка, содержащая исходную дату в «длинном» формате."
        },
        "StrMimeDate": {
            "prefix": "f_StrMimeDate",
            "body": [
                "StrMimeDate(${1:date})"
            ],
            "description": "Преобразует дату в формат MIME.Возвращаемое значение: Тип: Дата. Исходная дата в формат MIME."
        },
        "StrShortDate": {
            "prefix": "f_StrShortDate",
            "body": [
                "StrShortDate(${1:date})"
            ],
            "description": "Преобразует дату в строку в «коротком» формате (с двухсимвольным отображением года).Возвращаемое значение: Тип: Строка. Строка, содержащая исходную дату с двухсимвольным отображением года."
        },
        "StrTime": {
            "prefix": "f_StrTime",
            "body": [
                "StrTime(${1:date})"
            ],
            "description": "Выделяет время (количество часов и минут) из исходной даты в строковое выражение.Если в дате время не указывается или в качестве аргумента передается null или пустая строка, функция возвращает пустую строку.Возвращаемое значение: Тип: Строка. Строка, содержащая время, выделенное из исходной даты."
        },
        "StrXmlDate": {
            "prefix": "f_StrXmlDate",
            "body": [
                "StrXmlDate(${1:date})"
            ],
            "description": "Преобразует дату в строку в формате XML (данный формат не зависит от региональных настроек в системе).Если в качестве аргумента передается null или пустая строка, функция возвращает пустую строку.Возвращаемое значение: Тип: Строка. Строка, содержащая исходную дату в формате XML."
        },
        "UtcToLocalDate": {
            "prefix": "f_UtcToLocalDate",
            "body": [
                "UtcToLocalDate(${1:date})"
            ],
            "description": "Преобразует дату из Всемирного координированного времени в местное время.Если в качестве аргумента передается null или пустая строка, функция возвращает пустую строку.Возвращаемое значение: Тип: Строка. Строка, содержащая исходную дату."
        },
        "WeekDay": {
            "prefix": "f_WeekDay",
            "body": [
                "WeekDay(${1:date})"
            ],
            "description": "Возвращает номер дня недели (от 0 до 6) для заданной даты (0 - воскресенье, 1 - понедельник и т.д.).Возвращаемое значение: Тип: Целое число. Номер дня недели (от 0 до 6)."
        },
        "Year": {
            "prefix": "f_Year",
            "body": [
                "Year(${1:date})"
            ],
            "description": "Возвращает номер года для заданной даты.Возвращаемое значение: Тип: Целое число. Номер года."
        },
        //## ############ ##
        //## Работа с массивами ##
        "ArrayCount": {
            "prefix": "f_ArrayCount",
            "body": [
                "ArrayCount(${1:array})"
            ],
            "description": "Возвращает количество элементов массива.Примечание - Для массивов прямого доступа функция срабатывает мгновенно, для сложных массивов (например, результатов XQuery) вызов этой функции может повлечь за собой обращение к серверу либо другую длительную по времени операцию, поэтому не следует использовать данную функцию внутри циклов.Возвращаемое значение: Тип: Целое число. Количество элементов исходного массива."
        },
        "ArrayDirect": {
            "prefix": "f_ArrayDirect",
            "body": [
                "ArrayDirect(${1:array})"
            ],
            "description": "Преобразует заданный массив в массив прямого доступа (с прямым индексированием).Если заданный массив и так поддерживает прямое индексирование, функция возвращает сам исходный массив. В противном случае функция работает аналогично ArraySelectAll и возвращает массив, содержащий копию исходного массива.Возвращаемое значение: Тип: Массив. Массив прямого доступа."
        },
        "ArrayExtract": {
            "prefix": "f_ArrayExtract",
            "body": [
                "ArrayExtract(${1:array}, ${2:fieldExpr})"
            ],
            "description": "Выбирает значение определенного поля (атрибута) из каждого элемента массива и возвращает новый массив той же длины, содержащий выбранные значения.Возвращаемое значение: Тип: Массив. Массив, содержащий выбранные значения."
        },
        "ArrayExtractKeys": {
            "prefix": "f_ArrayExtractKeys",
            "body": [
                "ArrayExtractKeys(${1:array}, ${2:field})"
            ],
            "description": "Выбирает значение определенного поля (атрибута) из каждого элемента массива. Возвращает новый массив той же длины, содержащий выбранные значения.Функция аналогична более универсальной функции ArrayExtract, но работает быстрее.Возвращаемое значение: Тип: Массив. Массив, содержащий выбранные значения."
        },
        "ArrayFind": {
            "prefix": "f_ArrayFind",
            "body": [
                "ArrayFind(${1:array}, ${2:qualExpr})"
            ],
            "description": "Находит первый элемент массива, удовлетворяющий заданному условию.Если элемент, удовлетворяющий условию, не найден, функция завершается с исключением.Возвращаемое значение: Тип: Элемент массива. Отобранный элемент массива."
        },
        "ArrayFirstElem": {
            "prefix": "f_ArrayFirstElem",
            "body": [
                "ArrayFirstElem(${1:array})"
            ],
            "description": "Возвращает первый элемент заданного массива.Если массив не содержит ни одного элемента, функция завершается с исключением.Возвращаемое значение: Тип: Элемент массива. Отобранный элемент массива."
        },
        "ArrayIntersect": {
            "prefix": "f_ArrayIntersect",
            "body": [
                "ArrayIntersect(${1:array1}, ${2:array2}, ${3:fieldExpr1}, ${4:fieldExpr2})"
            ],
            "description": "Возвращает массив, содержащий элементы массива 1, у которых значение ключевого поля совпадает хотя бы с одним элементом массива 2.Примечание - Порядок следования элементов в возвращаемом массиве не определен. Если в массиве 1 есть элементы с одинаковым значением ключевого поля, то попадание в возвращаемый массив всех таких элементов не гарантируется. Гарантированно в возвращаемый массив попадут элементы с дублирующимся ключом в количестве, в каком элементы с этим же ключом присутствуют в массиве 2.Возвращаемое значение: Тип: Массив. Результирующий массив."
        },
        "ArrayMax": {
            "prefix": "f_ArrayMax",
            "body": [
                "ArrayMax(${1:array}, ${2:elemExpr})"
            ],
            "description": "Возвращает элемент заданного массива, соответствующий максимальному значению по определенному критерию.Если массив не содержит ни одного элемента, функция завершается с исключением.Возвращаемое значение: Тип: Элемент массива. Отобранный элемент массива."
        },
        "ArrayMerge": {
            "prefix": "f_ArrayMerge",
            "body": [
                "ArrayMerge(${1:array}, ${2:elemExpr}, ${3:delim})"
            ],
            "description": "Возвращает строку, полученную путем соединения (склеивания) данных из элементов массива.Возвращаемое значение: Тип: Строка. Строковое выражение, полученное путем соединения данных из элементов массива."
        },
        "ArrayMin": {
            "prefix": "f_ArrayMin",
            "body": [
                "ArrayMin(${1:array}, ${2:elemExpr})"
            ],
            "description": "Возвращает элемент заданного массива, соответствующий минимальному значению по определенному критерию.Если массив не содержит ни одного элемента, функция завершается с исключением.Возвращаемое значение: Тип: Элемент массива. Отобранный элемент массива."
        },
        "ArrayOptFind": {
            "prefix": "f_ArrayOptFind",
            "body": [
                "ArrayOptFind(${1:array}, ${2:qualExpr})"
            ],
            "description": "Находит первый элемент массива, удовлетворяющий заданному условию.Если элемент, удовлетворяющий условию, не найден, возвращается undefined.Возвращаемое значение: Тип: Элемент массива. Отобранный элемент массива."
        },
        "ArrayOptFindByKey": {
            "prefix": "f_ArrayOptFindByKey",
            "body": [
                "ArrayOptFindByKey(${1:array}, ${2:keyValue}, ${3:keyName})"
            ],
            "description": "Ищет первый элемент массива с заданным значением определенного поля (ключа).Если элемент, удовлетворяющий условию, не найден, возвращается undefined.Возвращаемое значение: Тип: Элемент массива. Отобранный элемент массива."
        },
        "ArrayOptFindBySortedKey": {
            "prefix": "f_ArrayOptFindBySortedKey",
            "body": [
                "ArrayOptFindBySortedKey(${1:array}, ${2:keyValue}, ${3:keyName})"
            ],
            "description": "Ищет первый элемент массива с заданным значением определенного поля (ключа).Если элемент, удовлетворяющий условию, не найден, возвращается undefined.Предполагается, что массив предварительно отсортирован по ключевому полю по возрастанию, что значительно повышает скорость поиска по сравнению с функцией ArrayOptFindByKey. Функцию имеет смысл использовать для частого поиска в каком-либо фиксированном справочнике большого размера, который необходимо заранее отсортировать.Если исходный массив не был отсортирован по ключу, то исполняемый код может прервать работу и выдать сообщение об ошибке.Возвращаемое значение: Тип: XML объект (Элемент массива)."
        },
        "ArrayOptFirstElem": {
            "prefix": "f_ArrayOptFirstElem",
            "body": [
                "ArrayOptFirstElem(${1:array}, ${2:value})"
            ],
            "description": "Возвращает первый элемент заданного массива или второй аргумент, если массив пустой. Если массив не содержит ни одного элемента, функция а второй аргумент отсутствует, то функция возвращает undefined. Если массив-аргумент отсутствует или не определен (undefined), то выдается ошибка с остановкой выполнения кода.Возвращаемое значение: Тип: Элемент массива или др. Отобранный элемент массива или значение аргумента <value>."
        },
        "ArrayOptMax": {
            "prefix": "f_ArrayOptMax",
            "body": [
                "ArrayOptMax(${1:array}, ${2:elemExpr})"
            ],
            "description": "Возвращает элемент заданного массива, соответствующий максимальному значению по определенному критерию.Если массив не содержит ни одного элемента, функция возвращает undefined.Возвращаемое значение: Тип: Элемент массива. Отобранный элемент массива."
        },
        "ArrayOptMin": {
            "prefix": "f_ArrayOptMin",
            "body": [
                "ArrayOptMin(${1:array}, ${2:elemExpr})"
            ],
            "description": "Возвращает элемент заданного массива, соответствующий минимальному значению по определенному критерию.Если массив не содержит ни одного элемента, функция возвращает undefined.Возвращаемое значение: Тип: Элемент массива. Отобранный элемент массива."
        },
        "ArrayRange": {
            "prefix": "f_ArrayRange",
            "body": [
                "ArrayRange(${1:array}, ${2:pos}, ${3:elemsNum})"
            ],
            "description": "Возвращает фрагмент массива, начиная с определенной позиции (номера элемента массива).Данная функция как правило используется для реализации постраничного просмотра (paging) результатов запроса XQuery.Возвращаемое значение: Тип: Массив. Массив, содержащий выбранные значения."
        },
        "ArraySelect": {
            "prefix": "f_ArraySelect",
            "body": [
                "ArraySelect(${1:array}, ${2:qualExpr})"
            ],
            "description": "Выбирает элементы массива, удовлетворяющие заданному критерию.Возвращаемое значение: Тип: Массив. Массив, содержащий выбранные значения."
        },
        "ArraySelectAll": {
            "prefix": "f_ArraySelectAll",
            "body": [
                "ArraySelectAll(${1:array})"
            ],
            "description": "Возвращает массив, содержащий все элементы исходного массива в виде массива с прямым доступом.Функция, как правило, используется в двух случаях:1. Для сложной либо многократной обработки (особенно с прямым индексированием) 'медленных' массивов, таких как результаты XQuery.2. Когда в цикле, осуществляющем проход по массиву, происходит выборочное удаление его элементов.Примечание - В целях избежания переполнения памяти не рекомендуется использовать функцию ArraySelectAll для массивов с количеством элементов более 1000.Возвращаемое значение: Тип: Массив. Результирующий массив."
        },
        "ArraySelectByKey": {
            "prefix": "f_ArraySelectByKey",
            "body": [
                "ArraySelectByKey(${1:array}, ${2:keyValue}, ${3:keyName})"
            ],
            "description": "Выбирает элементы массива с определенным значением заданного поля (ключа).Функция аналогична более универсальной функции ArraySelect, но работает быстрее.Возвращаемое значение: Тип: Массив. Массив, содержащий выбранные значения."
        },
        "ArraySelectBySortedKey": {
            "prefix": "f_ArraySelectBySortedKey",
            "body": [
                "ArraySelectBySortedKey(${1:array}, ${2:keyValue}, ${3:keyName})"
            ],
            "description": "Выбирает элементы массива, с определенным значением заданного поля. Массив должен быть предварительно отсортирован по возрастанию значения данного поля, что делает эту функцию существенно быстрее по сравнению с ArraySelectByKey.Возвращаемое значение: Тип: Массив. Массив, содержащий выбранные значения."
        },
        "ArraySelectDistinct": {
            "prefix": "f_ArraySelectDistinct",
            "body": [
                "ArraySelectDistinct(${1:array}, ${2:fieldExpr})"
            ],
            "description": "Возвращает массив уникальных значений полей элементов заданного массива.Возвращаемое значение: Тип: Массив. Массив, содержащий выбранные значения."
        },
        "ArraySort": {
            "prefix": "f_ArraySort",
            "body": [
                "ArraySort(${1:array}, ${2:elemExpr1}, ${3:order1}, ${4:elemExpr1}, ${5:order2})"
            ],
            "description": "Сортирует массив по заданным полям. Возвращает новый массив отсортированных значений. Функция требует нечетного числа аргументов (не менее 3-х), для каждого нового уровня сортировки добавляется два новых аргумента.Возвращаемое значение: Тип: Массив. Отсортированный массив."
        },
        "ArraySum": {
            "prefix": "f_ArraySum",
            "body": [
                "ArraySum(${1:array}, ${2:elemExpr})"
            ],
            "description": "Внимание - Данная функция работает только с массивом объектов. Возвращает сумму числовых значений определенного поля по всем элементам массива объектов.Если значение поля не является числовым, выдается сообщение об ошибке 'Element value is not numeric...' с прерыванием выполнения программного кода.Внимание - Данная функция работает только с массивом объектов.Возвращаемое значение: Тип: Целое или вещественное число. Сумма значений определенного числового поля по всем элементам массива объектов."
        },
        "ArrayUnion": {
            "prefix": "f_ArrayUnion",
            "body": [
                "ArrayUnion(${1:array1}, ${2:array2}, ${3:arrayN})"
            ],
            "description": "Последовательное объединение нескольких массивов в один. Функция не контролирует повторяемость элементов результирующего массива.Возвращаемое значение: Тип: Массив. Результирующий объединенный массив."
        },
        "IsArray": {
            "prefix": "f_IsArray",
            "body": [
                "IsArray(${1:arg})"
            ],
            "description": "Проверяет, является ли аргумент массивом.Возвращаемое значение: Тип: Булево. Возвращает значение, показывающее, является ли аргумент массивом (true – аргумент является массивом, false – аргумент не является массивом)."
        },
        //## ############ ##
        //## Работа с файловой системой ##
        "AppDirectoryPath": {
            "prefix": "f_AppDirectoryPath",
            "body": [
                "AppDirectoryPath()"
            ],
            "description": "Функция вызывается без аргументов. Возвращает путь к директории (папке), из которой запущено приложение (к установочной папке).Возвращаемое значение: Тип: Строка. Строка, содержащая путь к директории (папке), из которой запущено приложение."
        },
        "CreateDirectory": {
            "prefix": "f_CreateDirectory",
            "body": [
                "CreateDirectory(${1:path})"
            ],
            "description": "Создает новую директорию (папку) внутри существующей директории.Возвращаемое значение: Создается новая директория (папка). Возвращаемое значение отсутствует."
        },
        "CreateShellLink": {
            "prefix": "f_CreateShellLink",
            "body": [
                "CreateShellLink(${1:link_path}, ${2:dest_app_path}, ${3:iconPath})"
            ],
            "description": "Создает ярлык на указанный файл.Примечание - Функция используется только в EStaff при автоматической инсталляции клиента с серверного образа.Возвращаемое значение: Создается ярлык на файл. Возвращаемое значение отсутствует."
        },
        "DeleteDirectory": {
            "prefix": "f_DeleteDirectory",
            "body": [
                "DeleteDirectory(${1:path})"
            ],
            "description": "Удаляет директорию, включая все вложенные файлы и директории.Возвращаемое значение: Удаляется директория (папка), указанная в качестве аргумента. Возвращаемое значение отсутствует."
        },
        "DeleteFile": {
            "prefix": "f_DeleteFile",
            "body": [
                "DeleteFile(${1:path})"
            ],
            "description": "Удаляет файл, путь (или url) к которому указан в качестве аргумента.Возвращаемое значение: Удаляется файл, указанный в качестве аргумента. Возвращаемое значение отсутствует."
        },
        "FileIsBusy": {
            "prefix": "f_FileIsBusy",
            "body": [
                "FileIsBusy(${1:path})"
            ],
            "description": "Проверяет, открыт ли файл в другом приложении.Примечание – Если текстовый файл открыт в программе Блокнот, то функция выдает значение false.Возвращаемое значение: Тип: Булево. Возвращает значение, показывающее, открыт ли файл в другом приложении (true – файл открыт в другом приложении, false – файл не открыт)."
        },
        "FileName": {
            "prefix": "f_FileName",
            "body": [
                "FileName(${1:path})"
            ],
            "description": "Извлекает имя файла или папки из пути, переданного в качестве аргумента.Примечание – Путь, переданный в качестве аргумента, не обязательно должен существовать в файловой системе. Существование указанных файла или папки данной функцией не проверяется.Возвращаемое значение: Тип: Строка. Строка, содержащая имя файла или папки."
        },
        "FilePath": {
            "prefix": "f_FilePath",
            "body": [
                "FilePath(${1:filePath}, ${2:fragm})"
            ],
            "description": "Формирует путь в файловой системе, добавляя фрагмент к базовому пути.Примечание - Существование объекта по указанному файловому пути не проверяется.Возвращаемое значение: Тип: Строка. Строка, содержащая результирующий путь в файловой системе."
        },
        "FilePathExists": {
            "prefix": "f_FilePathExists",
            "body": [
                "FilePathExists(${1:path})"
            ],
            "description": "Проверяет, существует ли файл (или директория (папка)) по указанному пути.Возвращаемое значение: Тип: Булево. Возвращает значение, показывающее, существует ли файл (или директория (папка)) по указанному пути (true – объект файловой системы существует, false – объект не существует)."
        },
        "GetFileModDate": {
            "prefix": "f_GetFileModDate",
            "body": [
                "GetFileModDate(${1:path})"
            ],
            "description": "Возвращает дату и время последнего изменения (модификации) файла.Примечание – Если файл отсутствует в файловой системе, функция выдает сообщение об ошибке «Файл не найден» с прерыванием выполняемого кода.Возвращаемое значение: Тип: Дата. Возвращает дату и время последнего изменения файла."
        },
        "GetShellFolderPath": {
            "prefix": "f_GetShellFolderPath",
            "body": [
                "GetShellFolderPath(${1:folderID})"
            ],
            "description": "Возвращает путь к одной из стандартных директорий Shell.Примечание - Функция используется только в EStaff для регистрации add-on к браузерам.Возвращаемое значение: Тип: Строка. Строка, содержащая путь к стандартной директории Shell."
        },
        "IsAbsoluteFilePath": {
            "prefix": "f_IsAbsoluteFilePath",
            "body": [
                "IsAbsoluteFilePath(${1:path})"
            ],
            "description": "Проверяет, является ли корректным полный путь к файлу, переданный в качестве аргумента.Существование файла данной функцией не проверяется.Аргументы: <path> (обязательный) Тип: Строка. Путь (или url) к файлу."
        },
        "IsDirectory": {
            "prefix": "f_IsDirectory",
            "body": [
                "IsDirectory(${1:path})"
            ],
            "description": "Проверяет, указывает ли переданный в качестве аргумента путь (или url) на директорию (папку).Примечание - Если указанный объект файловой системы отсутствует, то функция возвращает значение false.Возвращаемое значение: Тип: Булево. Возвращает значение, показывающее, является ли указанный путь (или url) директорией (папкой). (true – указанный объект файловой системы является директорией (папкой), false – объект не является директорией (папкой))."
        },
        "LoadFileData": {
            "prefix": "f_LoadFileData",
            "body": [
                "LoadFileData(${1:path})"
            ],
            "description": "Загружает в систему содержимое указанного файла. Результат возвращается в виде строки, содержащей бинарные данные.Примечание – Если указанный файл отсутствует в файловой системе, функция выдает сообщение об ошибке «Файл не найден» с прерыванием выполняемого кода.Возвращаемое значение: Тип: Строка. Возвращает строку, содержащую бинарные данные из исходного файла."
        },
        "MoveFile": {
            "prefix": "f_MoveFile",
            "body": [
                "MoveFile(${1:path1}, ${2:path2})"
            ],
            "description": "Перемещает или переименовывает файл.Примечание – Если файл отсутствует в файловой системе, функция выдает сообщение об ошибке «Файл не найден» с прерыванием выполняемого кода.Возвращаемое значение: Перемещает или переименовывает файл, указанный в качестве аргумента <path1>. Возвращаемое значение отсутствует."
        },
        "ObtainDirectory": {
            "prefix": "f_ObtainDirectory",
            "body": [
                "ObtainDirectory(${1:path}, ${2:isRecursive})"
            ],
            "description": "Проверяет, существует ли указанная директория (папка), и если нет - создает ее.Примечание – Если аргумент <isRecursive> не указан или имеет значение false, то при отсутствии промежуточных папок, функция выдает сообщение об ошибке «Файл не найден» с прерыванием выполняемого кода.Возвращаемое значение: Создает указанную директорию (папку), если она отсутствовала в файловой системе. Возвращаемое значение отсутствует."
        },
        "ObtainSessionTempFile": {
            "prefix": "f_ObtainSessionTempFile",
            "body": [
                "ObtainSessionTempFile(${1:suffix})"
            ],
            "description": "Возвращает путь (url) ко временному файлу, который создается при запуске сессии приложения (и будет автоматически удален при следующем запуске сессии приложения).Возвращаемое значение: Тип: Строка. Строка, содержащая путь (url) ко временному файлу."
        },
        "ObtainTempFile": {
            "prefix": "f_ObtainTempFile",
            "body": [
                "ObtainTempFile(${1:suffix})"
            ],
            "description": "Возвращает путь (url) ко временному файлу, который создается при запуске приложения.Возвращаемое значение: Тип: Строка. Строка, содержащая путь (url) ко временному файлу."
        },
        "ParentDirectory": {
            "prefix": "f_ParentDirectory",
            "body": [
                "ParentDirectory(${1:path})"
            ],
            "description": "Извлекает имя родительской директории (папки) из пути, переданного в качестве аргумента.Примечание – Фактическое существование директорий не проверяется.Возвращаемое значение: Тип: Строка. Строка, содержащая имя родительской директории (папки)."
        },
        "PathIsDirectory": {
            "prefix": "f_PathIsDirectory",
            "body": [
                "PathIsDirectory(${1:path})"
            ],
            "description": "Проверяет, существует ли директория (папка) по указанному пути.Возвращаемое значение: Тип: Булево. Возвращает значение, показывающее, существует ли директория (папка) по указанному пути (true – директория (папка) существует, false – директория (папка) не существует)."
        },
        "PutFileData": {
            "prefix": "f_PutFileData",
            "body": [
                "PutFileData(${1:path}, ${2:str})"
            ],
            "description": "Сохраняет содержимое строки в файл. Содержимое строки интерпретируется как бинарные данные.Примечание - Если файл, указанный в аргументе <path>, не существует, то он создается заново. Если файл существует, то его содержимое удаляется без предупреждения, и он заполняется данными, указанными во втором аргументе функции.Если в файловой системе отсутствует папка, указанная в аргументе <path>, то функция выдает сообщение об ошибке «Файл не найден» с прерыванием выполняемого кода.Возвращаемое значение: Создается файл, содержащий данные из строки <str>. Возвращаемое значение отсутствует."
        },
        "ReadDirectory": {
            "prefix": "f_ReadDirectory",
            "body": [
                "ReadDirectory(${1:dirUrl})"
            ],
            "description": "Возвращает массив, содержащий перечень url файлов и вложенных директорий (папок) внутри указанной директории.Каждый элемент массива будет содержать url вложенного файла или директории.Возвращаемое значение: Тип: Массив. Массив, содержащий строковые значения url файлов и вложенных директорий (папок) внутри указанной директории."
        },
        "ReadDirectoryByPath": {
            "prefix": "f_ReadDirectoryByPath",
            "body": [
                "ReadDirectoryByPath(${1:path})"
            ],
            "description": "Возвращает массив, содержащий перечень файлов и вложенных директорий (папок) внутри указанной директории.Каждый элемент массива будет содержать полный путь ко вложенному файлу или директории (папке).Возвращаемое значение: Тип: Массив. Массив, содержащий строковые значения пути к файлам и вложенным директориям (папкам) внутри указанной директории."
        },
        "UserDataDirectoryPath": {
            "prefix": "f_UserDataDirectoryPath",
            "body": [
                "UserDataDirectoryPath()"
            ],
            "description": "Возвращает путь к директории (папке) для хранения данных пользователя. По умолчанию эта директория (папка) совпадает с установочной, если специальными настройками не установлено иное.Возвращаемое значение: Тип: Строка. Путь к директории (папке) для хранения данных пользователя."
        },
        //## ############ ##
        //## Работа с URL ##
		"AbsoluteUrl": {
            "prefix": "f_AbsoluteUrl",
            "body": [
                "AbsoluteUrl(${1:url}, ${2:baseUrl})"
            ],
            "description": "Преобразует url, указанный в качестве первого аргумента, в абсолютный.Если заданный url является абсолютным, то он возвращается без изменения.Примечание - Если второй аргумент (базовый url) не указан, то в качестве базового url используется url папки, в которой находится файл, содержащий выполняемый код.Возвращаемое значение: Тип: Строка. Строка, содержащая результирующий абсолютный url."
        },
		"CopyUrl": {
            "prefix": "f_CopyUrl",
            "body": [
                "CopyUrl(${1:destUrl}, ${2:srcUrl})"
            ],
            "description": "Копирует файл, указанный в аргументе <srcUrl>, в папку, указанную в аргументе <destUrl>.Примечание - В файловой системе должны существовать папки, указанные в аргументах <destUrl> и <srcUrl>, и файл, указанный в аргументе <srcUrl>. Если данные папки и файл не существуют, то функция выдает ошибку с завершением выполнения кода.Если файл, указанный в аргументе <destUrl>, существовал до выполнения функции, то он будет удален, а новый файл будет записан на его место.Возвращаемое значение: Копируется указанный файл. Возвращаемое значение отсутствует."
        },
		"DeleteUrl": {
            "prefix": "f_DeleteUrl",
            "body": [
                "DeleteUrl(${1:url})"
            ],
            "description": "Удаляет объект с заданным url.Примечание – Если указанный объект отсутствует в файловой системе, функция выдает сообщение об ошибке «Файл не найден» с прерыванием выполняемого кода.Возвращаемое значение: Удаляется указанный файл. Возвращаемое значение отсутствует."
        },
		"FilePathToUrl": {
            "prefix": "f_FilePathToUrl",
            "body": [
                "FilePathToUrl(${1:filePath})"
            ],
            "description": "Преобразует путь файловой системы в локальный url типа file:... .Примечание - Существование объекта по указанному url не проверяется.Возвращаемое значение: Тип: Строка. Строка, содержащая результирующий url."
        },
		"IsAbsoluteUrlStr": {
            "prefix": "f_IsAbsoluteUrlStr",
            "body": [
                "IsAbsoluteUrlStr(${1:url})"
            ],
            "description": "Проверяет, является ли строковое выражение абсолютным url (соответствует ли оно принципам формирования url).Примечание - Существование объекта под указанным url не проверяется.Возвращаемое значение: Тип: Булево. Возвращает значение, показывающее, является ли заданное строковое выражение абсолютным url (true - строковое выражение является абсолютным url, false – строковое выражение не является абсолютным url)."
        },
		"LoadUrlData": {
            "prefix": "f_LoadUrlData",
            "body": [
                "LoadUrlData(${1:url})"
            ],
            "description": "Загружает содержимое заданного url в результирующую строку, которая может содержать бинарные данные.Возвращаемое значение: Тип: Строка. Строка, в которую загружается содержимое файла."
        },
		"PutUrlData": {
            "prefix": "f_PutUrlData",
            "body": [
                "PutUrlData(${1:url}, ${2:dataStr})"
            ],
            "description": "Сохраняет в файл с заданным url содержимое строки, которая может содержать бинарные данные.Примечание – Если файл, указанный в аргументе <url>, существовал до выполнения функции, то он будет удален, а новый файл будет записан на его место.Возвращаемое значение: Содержимое строки сохраняется в указанном файле. Возвращаемое значение отсутствует."
        },
		"ReplaceUrlPathSuffix": {
            "prefix": "f_ReplaceUrlPathSuffix",
            "body": [
                "ReplaceUrlPathSuffix(${1:url}, ${2:suffix1}, ${3:suffix2})"
            ],
            "description": "Заменяет суффикс (расширение) имени файла в заданной строке url. Если суффикс <suffix1> в исходной строке url отсутствует, то замена суффикса не производится.Примечание - Функция не осуществляет фактического обращения к файловой системе.Возвращаемое значение: Тип: Строка. Строка, содержащая результирующий url."
        },
		"UrlAppendPath": {
            "prefix": "f_UrlAppendPath",
            "body": [
                "UrlAppendPath(${1:url}, ${2:addPath})"
            ],
            "description": "Добавляет фрагмент пути <addPath> к заданному url.Примечание - Существование объекта по указанному url не проверяется.Возвращаемое значение: Тип: Строка. Строка, содержащая результирующий url."
        },
		"UrlFileName": {
            "prefix": "f_UrlFileName",
            "body": [
                "UrlFileName(${1:url})"
            ],
            "description": "Извлекает имя файла из заданного url.Примечание - Существование объекта по указанному url не проверяется.Возвращаемое значение: Тип: Строка. Строка, содержащая имя файла, извлеченное из исходного url."
        },
		"UrlFileSize": {
            "prefix": "f_UrlFileSize",
            "body": [
                "UrlFileSize(${1:url})"
            ],
            "description": "Определяет размер файла в байтах по локальному url, переданному в качестве аргумента.Возвращаемое значение: Тип: Целое число. Размер файла в байтах."
        },
		"UrlHost": {
            "prefix": "f_UrlHost",
            "body": [
                "UrlHost(${1:url})"
            ],
            "description": "Возвращает хост из url, переданного в качестве аргумента.Примечание - Существование объекта по указанному url не проверяется.Возвращаемое значение: Тип: Строка. Строка, содержащая хост, извлеченный из исходного url (например, 'news.websoft.ru')."
        },
        "UrlModDate": {
            "prefix": "f_UrlModDate",
            "body": [
                "UrlModDate(${1:url})"
            ],
            "description": "Возвращает дату и время последнего изменения файла, находящегося по заданному локальному url типа file: или x-local: .Возвращаемое значение: Тип: Дата. Дата и время последнего изменения исходного файла."
        },
        "UrlParam": {
            "prefix": "f_UrlParam",
            "body": [
                "UrlParam(${1:url})"
            ],
            "description": "Извлекает строку параметров запроса из url, переданного в качестве аргумента. Если параметры в строке url отсутствуют, функция возвращает пустую строку.Примечание - Существование объекта по указанному url не проверяется.Возвращаемое значение: Тип: Строка. Строка, содержащая параметры запроса, извлеченные из исходного url."
        },
        "UrlParent": {
            "prefix": "f_UrlParent",
            "body": [
                "UrlParent(${1:url})"
            ],
            "description": "Извлекает url родительской директории из заданного url.Примечание - Существование объекта по указанному url не проверяется.Возвращаемое значение: Тип: Строка. Строковое выражение url родительской директории."
        },
        "UrlPath": {
            "prefix": "f_UrlPath",
            "body": [
                "UrlPath(${1:url})"
            ],
            "description": "Извлекает из url, переданного в качестве аргумента, путь без указания хоста.Примечание - Существование объекта по указанному url не проверяется.Возвращаемое значение: Тип: Строка. Строковое выражение пути без указания хоста."
        },
        "UrlPathSuffix": {
            "prefix": "f_UrlPathSuffix",
            "body": [
                "UrlPathSuffix(${1:url})"
            ],
            "description": "Возвращает суффикс (расширение) файла, указанного в строке url в качестве аргумента.Примечание - Существование объекта по указанному url не проверяется.Возвращаемое значение: Тип: Строка. Строка, содержащая суффикс (расширение) файла."
        },
        "UrlQuery": {
            "prefix": "f_UrlQuery",
            "body": [
                "UrlQuery(${1:url})"
            ],
            "description": "Извлекает из url, переданного в качестве аргумента, объект JavaScript, содержащий информацию о параметрах запроса с разбивкой их на пары 'имя - значение'.Обращение к значениям данного объекта производится по именам параметра запроса: <объект>.<имя параметра запроса>.Возвращаемое значение: Тип: Объект JavaScript. Объект, содержащий данные о парах 'имя - значение'."
        },
        "UrlSchema": {
            "prefix": "f_UrlSchema",
            "body": [
                "UrlSchema(${1:url})"
            ],
            "description": "Возвращает схему url (file, http, mailto, ftp, x-local).Примечание - Существование объекта по указанному url не проверяется.Возвращаемое значение: Тип: Строка. Строка, содержащая схему url (например, 'file', 'http')."
        },
        "UrlToFilePath": {
            "prefix": "f_UrlToFilePath",
            "body": [
                "UrlToFilePath(${1:url})"
            ],
            "description": "Преобразует локальный url (типа file: или x-local: ) в путь файловой системы.Примечание - Существование объекта по указанному url не проверяется.Возвращаемое значение: Тип: Строка. Строка, содержащая путь файловой системы."
        },
        "WebAppUrl": {
            "prefix": "f_WebAppUrl",
            "body": [
                "WebAppUrl(${1:url})"
            ],
            "description": "Преобразует заданный url (схемы 'x-app') в url, пригодный для использования во встроенном браузере (элемент HYPER).Для десктоп-версии осуществляется преобразование в url схемы 'file', а для веб-версии - в специальный серверный запрос.Возвращаемое значение: Тип: Строка. Строковое выражение url, преобразованное для использования во встроенном браузере."
        },
        //## ############ ##
        //## Работа с формами данных ##
        "CreateFormElem": {
            "prefix": "f_CreateFormElem",
            "body": [
                "CreateFormElem(${1:name}, ${2:type})"
            ],
            "description": "Создает новый элемент формы. Созданный элемент формы не имеет родительского элемента.Функция используется в редких случаях, например, для динамической генерации форм данных.Возвращаемое значение: Тип: Элемент формы (объект XmlFormElem). Ссылка на элемент формы."
        },
        "DeleteAllFormMappings": {
            "prefix": "f_DeleteAllFormMappings",
            "body": [
                "DeleteAllFormMappings()"
            ],
            "description": "Функция вызывается без аргументов. Удаляет все отображения (перенаправления) форм (mapping), зарегистрированные при помощи функции RegisterFormMapping.Mapping - это таблица, которая содержит соответствия между старыми и новыми формами документов. При попытке открыть документ по старой форме, будет автоматически вызвана новая форма, на которую указывает элемент таблицы.Функция используется в редких случаях, обычно при конвертации баз данных из предыдущих версий программы.Возвращаемое значение: Возвращаемое значение: Удаляет все ранее зарегистрированные отображения (перенаправления) форм (mapping). Возвращаемое значение отсутствует."
        },
        "DropFormsCache": {
            "prefix": "f_DropFormsCache",
            "body": [
                "DropFormsCache(${1:urlPattern})"
            ],
            "description": "Удаляет определенные формы из кэша. Функция используется в редких случаях при изменении структур данных на лету.Возвращаемое значение: Удаляет определенные из кэша в соответствии с заданным значением аргумента. Возвращаемое значение отсутствует."
        },
        "FetchForm": {
            "prefix": "f_FetchForm",
            "body": [
                "FetchForm(${1:formUrl})"
            ],
            "description": "Загружает форму из XMD-файла и помещает ее в кэш форм.Если форма с данным url уже находится в кэше, возвращается уже загруженный вариант.Возвращаемое значение: Тип: Форма (объект XmlForm). Ссылка на форму."
        },
        "GetOptAutoDocForm": {
            "prefix": "f_GetOptAutoDocForm",
            "body": [
                "GetOptAutoDocForm(${1:docUrl})"
            ],
            "description": "Находит зарегистрированную пару «url документа» - «url формы» (элемент AutoDoc (см. также функцию RegisterAutoDoc )) в списке зарегистрированных автоматически создаваемых документов и возвращает ссылку на форму. Если соответствующая пара в списке отсутствует, возвращает значение undefined.Возвращаемое значение: Тип: Форма (объект XmlForm). Ссылка на форму. Если форма, соответствующая аргументу <docUrl> найдена, то функция возвращает ссылку на эту форму, в противном случае - возвращает значение undefined."
        },
        "GetOptCachedForm": {
            "prefix": "f_GetOptCachedForm",
            "body": [
                "GetOptCachedForm(${1:formUrl})"
            ],
            "description": "Пытается найти по заданному url форму в кэше загруженных форм. Если такая форма была загружена в кэш, возвращает ссылку на форму, если нет - возвращает undefined.Возвращаемое значение: Тип: Форма (объект XmlForm). Ссылка на форму. Если искомая форма была загружена в кэш, функция возвращает ссылку на форму, если нет - возвращает значение undefined."
        },
        "RegisterAutoDoc": {
            "prefix": "f_RegisterAutoDoc",
            "body": [
                "RegisterAutoDoc(${1:docUrl}, ${2:formUrl})"
            ],
            "description": "Регистрирует пару «url документа» - «url формы» для автоматически создаваемого документа. Если где-то из программы будет обращение к этому документу с попыткой его открыть, а документ еще не создан, то он будет создан по соответствующей форме и открыт. Если документ на момент обращения уже будет существовать, то он будет открыт по той же форме.Используется для регистрации в программе каких-либо файлов, содержащих настройки, которых изначально нет, но при первой попытке обращения к этим файлам, настройки фактически активируются в базе данных.Возвращаемое значение: Регистрирует пару «url документа» - «url формы». Возвращаемое значение отсутствует."
        },
        "RegisterFormFromStr": {
            "prefix": "f_RegisterFormFromStr",
            "body": [
                "RegisterFormFromStr(${1:formUrl}, ${2:formData})"
            ],
            "description": "Регистрирует XML-форму, заданную в аргументах. Используется для программной генерации форм 'на лету'. Возвращаемое значение: Тип: Форма (объект XmlForm). Ссылка на форму."
        },
        "RegisterFormMapping": {
            "prefix": "f_RegisterFormMapping",
            "body": [
                "RegisterFormMapping(${1:formUrl}, ${2:newForm})"
            ],
            "description": "Регистрирует отображение (перенаправление) (mapping) одной формы в другую.Mapping - это таблица, в которой содержит соответствия между старыми и новыми формами документов. При попытке открыть документ по старой форме, будет автоматически вызвана новая форма, на которую указывает элемент таблицы.Функция используется в редких случаях, обычно при конвертации баз данных из предыдущих версий программы.Возвращаемое значение: Регистрирует отображение (перенаправление) (mapping) одной формы в другую. Возвращаемое значение отсутствует."
        },
        "RegisterSubForm": {
            "prefix": "f_RegisterSubForm",
            "body": [
                "RegisterSubForm(${1:formUrl}, ${2:elemPath})"
            ],
            "description": "Регистрирует субформу - фрагмент (элемент) существующей формы под новым url. Новый url состоит из url формы и полного наименования элемента формы, которое включает в себя путь внутри формы от корня до этого элемента.Редко используемая функция.Возвращаемое значение: Тип: Строка. Url новой субформы."
        },
        //## ############ ##
        //## Работа с базой данных приложения ##
        "CatalogNameToObjectName": {
            "prefix": "f_CatalogNameToObjectName",
            "body": [
                "CatalogNameToObjectName(${1:catalogName})"
            ],
            "description": "Преобразует имя каталога в имя объекта. Фактически функция преобразует имя существительное множественного числа в имя существительное единственного числа по правилам английского языка.Возвращаемое значение: Тип: Строка. Имя объекта."
        },
        "FetchDb": {
            "prefix": "f_FetchDb",
            "body": [
                "FetchDb(${1:dbName})"
            ],
            "description": "Открывает базу данных и помещает ее в список открытых баз. Если база уже открыта, возвращается ссылка на открытую базу из указанного списка.Возвращаемое значение: Тип: Объект XmlDatabase. Ссылка на объект базы данных."
        },
        "FindOptCatalog": {
            "prefix": "f_FindOptCatalog",
            "body": [
                "FindOptCatalog(${1:catalogName})"
            ],
            "description": "Ищет каталог по имени (наименованию) во всех используемых базах данных. Если функция не находит указанный каталог, то возвращается значение undefined.Возвращаемое значение: Тип: Объект XmlCatalog. Ссылка на найденный объект каталога."
        },
        "FindSharedCatalog": {
            "prefix": "f_FindSharedCatalog",
            "body": [
                "FindSharedCatalog(${1:catalogName})"
            ],
            "description": "Ищет каталог по имени (наименованию) во всех используемых базах данных. Если функция не находит указанный каталог, то выдает ошибку.Примечание - Функция по историческим причинам названа не совсем корректно. Ее ближайший эквивалент - FindOptCatalog - имеет более правильное наименование.Возвращаемое значение: Тип: Объект XmlCatalog. Ссылка на найденный объект каталога."
        },
        "GetDbFilePath": {
            "prefix": "f_GetDbFilePath",
            "body": [
                "GetDbFilePath(${1:moduleName})"
            ],
            "description": "На основании наименования модуля зашифрованной базы данных выдает полный путь до XFP-файла.Функция не проверяет фактическое существование файла по указанному пути.Возвращаемое значение: Тип: Строка. Полный путь до XFP-файла соответствующей базы данных."
        },
        "IsPackageDb": {
            "prefix": "f_IsPackageDb",
            "body": [
                "IsPackageDb(${1:dbName})"
            ],
            "description": "Функция возвращает значение true, если указанная база данных находится в зашифрованном модуле (XFP-файле), или значение false - в противном случае.Возвращаемое значение: Тип: Булево. Возвращает значение, показывающее, находится ли база данных в зашифрованном модуле (true – база данных находится в зашифрованном модуле, false – база данных не находится в зашифрованном модуле)."
        },
        "LoadLdsUrlData": {
            "prefix": "f_LoadLdsUrlData",
            "body": [
                "LoadLdsUrlData(${1:url})"
            ],
            "description": "Загружает содержимое заданного url в результирующую строку, которая может содержать бинарные данные.Аналог функции LoadUrlData, позволяющий явно указать адрес сервера приложения, с которого будут загружаться данные.Используется, как правило, для синхронизации данных или обмена данными между несколькими серверами приложений.Возвращаемое значение: Тип: Строка. Строка, в которую загружается содержимое файла."
        },
        "SetDbFilePackage": {
            "prefix": "f_SetDbFilePackage",
            "body": [
                "SetDbFilePackage(${1:dbName}, ${2:filePackage})"
            ],
            "description": "Осуществляет загрузку в указанную зашифрованную базу данных (модуль) информации из объекта. Используется, например, при подгрузке интернет-модулей в E-Staff c сайта производителя. Объект, информация из которого может быть загружена в базу данных, создается специальной командой new FilePackage, после чего в объект помещается информация, например, при помощи метода LoadFromStr.Возвращаемое значение: Загрузка пакета в указанную базу данных выполнена. Возвращаемое значение отсутствует."
        },
        "SetDbHostDir": {
            "prefix": "f_SetDbHostDir",
            "body": [
                "SetDbHostDir(${1:dbName}, ${2:dirUrl})"
            ],
            "description": "Устанавливает директорию, которую программа будет считать местом расположения базы данных. По умолчанию директория называется так же, как и база, и располагается в программной директории. Функция используется, если нужно поместить базу в другую директорию.Возвращаемое значение: Производится установка новой директории для указанной базы данных. Возвращаемое значение отсутствует."
        },
        "XQuery": {
            "prefix": "f_XQuery",
            "body": [
                "XQuery(${1:query}, ${2:options})"
            ],
            "description": "Выполняет заданный запрос на языке XQuery. В сетевой версии приложения запрос выполняется на сервере.Возвращаемое значение: Тип: Массив. Массив объектов, отобранных запросом."
        },
        "XQueryLocal": {
            "prefix": "f_XQueryLocal",
            "body": [
                "XQueryLocal(${1:query})"
            ],
            "description": "Выполняет заданный запрос на языке XQuery на клиентской машине. Используется для запроса данных из каталогов локальных баз данных.Возвращаемое значение: Тип: Массив. Массив объектов, отобранных запросом."
        },
        //## ############ ##
        //## Работа с документами XML ##
        "DeleteDoc": {
            "prefix": "f_DeleteDoc",
            "body": [
                "DeleteDoc(${1:url}, ${2:StrictDelete})"
            ],
            "description": "Удаляет документ с заданным url. Удаляемый документ попадает в корзину, откуда его можно будет при необходимости восстановить (например, с помощью функции MoveDoc).Возвращаемое значение: Производится удаление документа. Возвращаемое значение отсутствует."
        },
        "FetchDoc": {
            "prefix": "f_FetchDoc",
            "body": [
                "FetchDoc(${1:url}, ${2:options})"
            ],
            "description": "Открывает XML-документ и помещает его в кэш документов.Если документ с заданным url уже находится в кэше, возвращается ссылка на документ.Возвращаемое значение: Тип: Объект XmlDoc. Ссылка на документ."
        },
        "GetCachedDoc": {
            "prefix": "f_GetCachedDoc",
            "body": [
                "GetCachedDoc(${1:url})"
            ],
            "description": "Возвращает документ с заданным url из кэша.Если документ с заданным url в кэше отсутствует, функция завершается с ошибкой.Возвращаемое значение: Тип: Объект XmlDoc. Ссылка на документ."
        },
        "MoveDoc": {
            "prefix": "f_MoveDoc",
            "body": [
                "MoveDoc(${1:url}, ${2:newUrl})"
            ],
            "description": "Перемещает XML-документ из одного url в другой url. В отличие от обычного перемещения файла, действие этой функции сопровождается выполнением стандартных свойств OnSave, OnBeforeSave и т.д. Документ сначала сохраняется по новому url, затем удаляется из предыдущего url. Редко используемая функция.Возвращаемое значение: Производится перемещение документа. Возвращаемое значение отсутствует."
        },
        "ObjectDocUrl": {
            "prefix": "f_ObjectDocUrl",
            "body": [
                "ObjectDocUrl(${1:dbName}, ${2:objectType}, ${3:objectID})"
            ],
            "description": "Возвращает url объектного документа по имени базы, типа объекта и ID документа.Примечание - Url, сформированный данной функцией, не обязательно должен существовать в файловой системе. Существование указанного url функцией не проверяется.Возвращаемое значение: Тип: Строка. Url документа."
        },
        "ObjectIDFromUrl": {
            "prefix": "f_ObjectIDFromUrl",
            "body": [
                "ObjectIDFromUrl(${1:url})"
            ],
            "description": "Выдает ID объектного документа по его url. См. также ObjectDocUrl.Примечание - Url, переданный в качестве аргумента, не обязательно должен существовать в файловой системе. Существование указанного url функцией не проверяется.Возвращаемое значение: Тип: Целое число или Строка. ID документа."
        },
        "ObjectNameFromUrl": {
            "prefix": "f_ObjectNameFromUrl",
            "body": [
                "ObjectNameFromUrl(${1:url})"
            ],
            "description": "Выдает наименование типа объекта по его url. См. также ObjectDocUrl и ObjectIDFromUrl.Примечание - Url, переданный в качестве аргумента, не обязательно должен существовать в файловой системе. Существование указанного url функцией не проверяется.Возвращаемое значение: Тип: Строка. Наименование типа объекта."
        },
        "ObtainUiDoc": {
            "prefix": "f_ObtainUiDoc",
            "body": [
                "ObtainUiDoc(${1:docUrl})"
            ],
            "description": "Пытается найти открытую в пользовательском интерфейсе карточку XML-документа. Если таковая карточка найдена, функция возвращает ссылку на документ. В противном случае программа выдает ошибку. Чтобы сохранить измененный документ, необходимо использовать функцию UpdateUiDoc (а не вызвать метод Doc.Save, как при открытии документа при помощи OpenDoc). Возвращаемое значение: Тип: Объект XmlDoc. Ссылка на документ."
        },
        "OpenDoc": {
            "prefix": "f_OpenDoc",
            "body": [
                "OpenDoc(${1:url}, ${2:options})"
            ],
            "description": "Открывает XML-документ и возвращает ссылку на объект типа XmlDoc.Если XML-документ, указанный в аргументе, не найден, программа выдает ошибку.См. также функцию tools.open_doc и статью Операция открытия документа (OpenDoc).Возвращаемое значение: Тип: Объект XmlDoc. Ссылка на документ."
        },
        "OpenDocFromStr": {
            "prefix": "f_OpenDocFromStr",
            "body": [
                "OpenDocFromStr(${1:dataStr}, ${2:options})"
            ],
            "description": "Открывает новый XML-документ, содержащий данные, указанные в строке, и возвращает ссылку на объект типа XmlDoc.Возвращаемое значение: Тип: Объект XmlDoc. Ссылка на документ."
        },
        "OpenNewDoc": {
            "prefix": "f_OpenNewDoc",
            "body": [
                "OpenNewDoc(${1:formUrl})"
            ],
            "description": "Создает новый XML-документ по заданной форме.Возвращаемое значение: Тип: Объект XmlDoc. Ссылка на документ."
        },
        "RegisterSharedDoc": {
            "prefix": "f_RegisterSharedDoc",
            "body": [
                "RegisterSharedDoc(${1:docUrl})"
            ],
            "description": "Загружает XML-документ в кэш документов и делает его корневой элемент видимым в списке глобальных имен.Примечание - Для корректного выполнения функции необходимо реальное наличие файла документа, указанного в аргументе <docUrl>.Возвращаемое значение: Тип: Объект XmlDoc. Ссылка на документ."
        },
        "UpdateUiDoc": {
            "prefix": "f_UpdateUiDoc",
            "body": [
                "UpdateUiDoc(${1:doc})"
            ],
            "description": "Сохраняет изменения в документе, открытом при помощи функции ObtainUiDoc. Если документ был открыт пользователем на экране без применения функции ObtainUiDoc, то функция UpdateUiDoc устанавливает аргумент метода Doc.SetChanged(true). Установка этого аргумента необходима, чтобы при закрытии документа пользователю было предложено сохранить изменения. Если это был документ, открытый программой без участия пользователя, действие функции аналогично действию метода Doc.Save. Если документ не был открыт на экране, то он будет просто сохранен.Возвращаемое значение: Производится сохранение открытого документа или выполняются иные действия, связанные с его сохранением. Возвращаемое значение отсутствует."
        },
        "UrlFromDocID": {
            "prefix": "f_UrlFromDocID",
            "body": [
                "UrlFromDocID(${1:docID}, ${2:dbName})"
            ],
            "description": "Возвращает url объектного документа с заданным идентификационным номером (id).Возвращаемое значение: Тип: Строка. Строка, содержащая url документа."
        },
        //## ############ ##
        //## Работа с элементами XML ##
		"CreateDynamicElem": {
            "prefix": "f_CreateDynamicElem",
            "body": [
                "CreateDynamicElem(${1:name}, ${2:type})"
            ],
            "description": "Создает динамический XML-элемент (без привязки к форме) со всеми присущими ему свойствами ((Value, Name, Xml …) и методами (AddChild, …). Созданный элемент не имеет родительского элемента.Возвращаемое значение: Тип: Объект XmlElem. Ссылка на созданный объект XmlElem."
        },
		"CreateElem": {
            "prefix": "f_CreateElem",
            "body": [
                "CreateElem(${1:formUrl}, ${2:elemPath})"
            ],
            "description": "Создает XML-элемент, заданный по фрагменту формы (см. пример и прилагаемый файл). Созданный элемент не имеет родительского элемента.Функция используется для управления сложными структурами в оперативной памяти компьютера (как альтернатива JavaScript Object), а также для формирования XML для внешнего использования.Возвращаемое значение: Тип: Объект XmlElem. Ссылка на созданный объект XmlElem."
        },
		"ExportElemsToStr": {
            "prefix": "f_ExportElemsToStr",
            "body": [
                "ExportElemsToStr(${1:objArray})"
            ],
            "description": "Загружает массив XML-элементов в строку. Используется для передачи параметров в плагины и другие внешние процедуры.Смотри также функцию LoadElemsFromStr.Возвращаемое значение: Тип: Строка. Строка, содержащая объекты в XML-формате."
        },
		"GetFailedForeignElem": {
            "prefix": "f_GetFailedForeignElem",
            "body": [
                "GetFailedForeignElem(${1:catalogue})"
            ],
            "description": "Создает новый пустой элемент массива, не добавляя его в сам массив. Используется для отработки 'битых ссылок' на элементы массива и ссылок на удаленные элементы массива.Смотри также функции GetOptForeignElem и GetForeignElem.Примечание - В текущей реализации массив может быть только каталогом.Возвращаемое значение: Тип: Объект XmlElem. Ссылка на созданный объект XmlElem."
        },
		"GetForeignElem": {
            "prefix": "f_GetForeignElem",
            "body": [
                "GetForeignElem(${1:objArray}, ${2:keyVal})"
            ],
            "description": "Находит целевой элемент массива по значению первичного ключа (для стандартных каталогов первичным ключом по умолчанию является id объекта).Если соответствующий элемент не найден, функция выдает ошибку.Смотри также функцию GetOptForeignElem.Примечание - Действие функции несколько отличается от функции ArrayOptFindByKey за счет поддержки рекурсивных массивов XML-элементов.Возвращаемое значение: Тип: Объект (как правило, объект XmlElem). Ссылка на найденный объект."
        },
		"GetOptForeignElem": {
            "prefix": "f_GetOptForeignElem",
            "body": [
                "GetOptForeignElem(${1:objArray}, ${2:keyVal})"
            ],
            "description": "Находит целевой элемент массива по значению первичного ключа (для стандартных каталогов первичным ключом по умолчанию является id объекта).Если соответствующий элемент не найден, возвращается undefined.Смотри также функцию GetForeignElem.Примечание - Действие функции несколько отличается от функции ArrayOptFindByKey за счет поддержки рекурсивных массивов XML-элементов.Возвращаемое значение: Тип: Объект (как правило, объект XmlElem). Ссылка на найденный объект."
        },
		"LoadElemsFromStr": {
            "prefix": "f_LoadElemsFromStr",
            "body": [
                "LoadElemsFromStr(${1:arg})"
            ],
            "description": "Загружает строку в массив XML-элементов. Используется при обработке параметров, полученных от внешних процедур и плагинов.Смотри также функцию ExportElemsToStr.Возвращаемое значение: Тип: Массив. Массив XML-элементов, загруженный из строки."
        },
        //## ############ ##
    //# ############## #
    
    


    "ObtainChildByKey": {
        "prefix": "f_ObtainChildByKey",
        "body": [
            "custom_elems.ObtainChildByKey('${1:sChildElemName}').value"
        ],
        "description": "Проверяет наличие элемента с указанным ключем и добавляет таковой в случае его отсутствия (Используется в основном чтобы записать значение в дочерний элемент / кастомное поле)"
    },
    "GetOptChildByKey": {
        "prefix": "f_GetOptChildByKey",
        "body": [
            "custom_elems.GetOptChildByKey('${1:sChildElemName}', ${2:defaultVal}).value"
        ],
        "description": "Получить значение дочернего элемента / кастомного поля по ключу"
    },
    //# ############## #
    //# tools #
    "tools.object_to_text": {
        "prefix": "t_ObjToTxt",
        "body": [
            "tools.object_to_text(${1:object}, 'json')"
        ],
        "description": "Преобразует массив или объект в строку"
    },
    "tools.create_notification": {
        "prefix": "t_CreateNotif",
        "body": [
            "tools.create_notification('${1:sCodeTypeNotif}', ${2:iPersonID}, '${3:sTextNotif}', ${4:iSecondObjectID})"
        ],
        "description": "Создает новое неотправленное уведомление"
    },
    "tools_web.get_web_param": {
        "prefix": "t_w_GetWebParam",
        "body": [
            "tools_web.get_web_param(curParams, '${1:sWebParam}', '', true)"
        ],
        "description": "Получаем значение из переменной шаблона/раздела портала"
    },
    "tools.open_doc": {
        "prefix": "t_OpenDoc",
        "body": [
            "tools.open_doc(${1:iDocID})"
        ],
        "description": "Открывает XML-документ по указанному ID объекта"
    },
    "tools.read_object": {
        "prefix": "t_ReadObj",
        "body": [
            "tools.read_object(${1:sObj})"
        ],
        "description": "Преобразует строку в формате json в объект"
    },
    "tools.call_code_library_method": {
        "prefix": "t_CallLib",
        "body": [
            "tools.call_code_library_method('${1:sCodeLib}', '${2:sMethodName}', [${3:Param1}, ${4:Param2}])"
        ],
        "description": "Вызов метода из библиотеки программного кода"
    },
    //# ############## #
    //# XAML #
    "htmlbox": {
        "prefix": "xaml_HtmlBox",
        "body": [
            "HTMLBox Dynamic=\"true\">",
            "	<![CDATA[",
            "		$1",
            "	]]>",
            "</HTMLBox>"
        ],
        "description": "XAML разметка, Отображает HTML код"
    },
    //# ############## #
    //# Other WT #
    "wt_sql_request": {
        "prefix": "wt_SqlRequest",
        "body": [
            "${1:sSqlReq} = \"",
            "	$2",
            "\";",
            "${3:arrResult} = ArraySelectAll(XQuery(\"sql: \" + ${1:sSqlReq}));"
        ],
        "description": "Конструкция для SQL запроса"
    },
    "wt_forin": {
        "prefix": "wt_forin",
        "body": [
            "for (${2:arrElem} in ${1:arrResult}) ",
            "{",
            "	$3",
            "}"
        ],
        "description": "Конструкция for in"
    },
    "TopElem": {
        "prefix": "wt_TopElem",
        "body": [
            "${2:doc} = tools.open_doc(${1:iDocID});",
            "${3:teDoc} = ${2:doc}.TopElem;"
        ],
        "description": "Возвращает корневой элемент в документе"
    }
    //# ############## #
}
