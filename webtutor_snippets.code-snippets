{
    //# Alert #
    "alert test": {
        "prefix": "al_Test",
        "body": [
            "alert('${1:test} = ' + ${2:Param});"
        ],
        "description": "Вывод чего либо в лог"
    },
    "alert tools.object_to_text": {
        "prefix": "al_t_ObjToTxt",
        "body": [
            "alert('${1:object} = ' + tools.object_to_text(${1:object}, 'json'));"
        ],
        "description": "Преобразует массив или объект в строку и выводит в лог"
    },
    //# ############## #
    //# Встроенные функции #
        //## Преобразование типов данных ##
        "DataType": {
            "prefix": "f_DataType",
            "body": [
                "DataType(${1:arg})"
            ],
            "description": "Возвращает тип аргумента <arg> (строка, число, объект и т.п.). Если в качестве аргумента задан объект любого типа, то функция возвращает значение 'object'."
        },
        "IsEmptyValue": {
            "prefix": "f_IsEmptyValue",
            "body": [
                "IsEmptyValue(${1:arg})"
            ],
            "description": "Проверяет, имеет ли переменная значение undefined, null или пустая строкой. Позволяет писать универсальный код, не зная точный тип данных переданного аргумента. Действует начиная с версии 507."
        },
        "ObjectType": {
            "prefix": "f_ObjectType",
            "body": [
                "ObjectType(${1:obj})"
            ],
            "description": "Возвращает тип объекта (массив, JS-объект, XmlElem и т.п.). Может использоваться вместе с функцией DataType, если DataType возвращает значение 'object'. Если аргумент имеет простой тип данных (строка, число, булево и т.д.), функция возвращает пустую строку."
        },
        "OptInt": {
            "prefix": "f_OptInt",
            "body": [
                "OptInt(${1:arg1}, ${2:defaultVal})"
            ],
            "description": "Преобразует значение аргумента к целому неотрицательному числу (округление производится в меньшую сторону). Если основной аргумент не может быть преобразован к целому неотрицательному числу, функция возвращает второй аргумент (не обязательно числового типа) или значение undefined без прерывания выполняемого кода (если второй аргумент отсутствует)."
        },
        "OptReal": {
            "prefix": "f_OptReal",
            "body": [
                "OptReal(${1:arg1}, ${2:defaultVal})"
            ],
            "description": " Преобразует значение аргумента к действительному числу. Если основной аргумент не может быть преобразован к действительному числу, функция возвращает второй аргумент (не обязательно числового типа) или значение undefined без прерывания выполняемого кода (если второй аргумент отсутствует)."
        },
        "RValue": {
            "prefix": "f_RValue",
            "body": [
                "RValue(${1:arg})"
            ],
            "description": "Возвращает скалярное значение аргумента, если в качестве аргумента передан объект. Если передано скалярное значение, то функция возвращает то же самое значение. Может быть использована для отмены наследования при создании новых объектов на основе базовых."
        },
        "StrHexColor": {
            "prefix": "f_StrHexColor",
            "body": [
                "StrHexColor(${1:color})"
            ],
            "description": "Преобразует десятеричное обозначение цвета (RGB-код) в шестнадцатеричное обозначение (HEX-код), принятое в формате HTML. Если аргумент не может быть преобразован к формату RGB-кода, функция выдает ошибку."
        },
        "StrHexInt": {
            "prefix": "f_StrHexInt",
            "body": [
                "StrHexInt(${1:arg})"
            ],
            "description": "Преобразует значение аргумента в строку, содержащую значение в 16-значном 16-ричном формате (64 бита). Округление исходного значения производится в меньшую сторону. Если аргумент выходит за пределы допустимых значений или имеет формат строки, функция выдает ошибку."
        },
        "StrInt": {
            "prefix": "f_StrInt",
            "body": [
                "StrInt(${1:arg}, ${2:digitsNum}, ${3:addGroupDelim})"
            ],
            "description": "Преобразует числовой аргумент в строку в целочисленном формате. Округление исходного значения производится в меньшую сторону. Данная функция также преобразует 16-ричное число в десятичное в строковом формате. Если аргумент не может быть преобразован к целому неотрицательному числу, функция выдает ошибку."
        },
        "StrIntZero": {
            "prefix": "f_StrIntZero",
            "body": [
                "StrIntZero(${1:arg}, ${2:digitsNum}, ${3:addGroupDelim})"
            ],
            "description": "Преобразует числовой аргумент в строку в целочисленном формате (аналогично функции StrInt), но при нулевом аргументе (с учетом округления) возвращает значение '-'. Округление исходного значения производится в меньшую сторону. Если аргумент не может быть преобразован к целому неотрицательному числу, функция выдает ошибку."
        },
        "StrSignedInt": {
            "prefix": "f_StrSignedInt",
            "body": [
                "StrSignedInt(${1:arg}, ${2:digitsNum}, ${3:addGroupDelim})"
            ],
            "description": "Преобразует числовой аргумент в строку, содержащую целое число со знаком. Округление исходного значения производится в меньшую сторону по модулю. Если первый аргумент не может быть преобразован к целому числу со знаком, функция выдает ошибку. Внимание! Если первый аргумент больше или равен 9223372036854775808, то использование функции приводит к некорректному результату."
        },
        "StrReal": {
            "prefix": "f_StrReal",
            "body": [
                "StrReal(${1:arg}, ${2:precision}, ${3:addGroupDelim})"
            ],
            "description": "Преобразует в строку числовой аргумент в формате действительного числа. Производит округление до количества знаков, указанных во втором аргументе. Если аргумент не является действительным числом и не может быть преобразован к нему, функция выдает ошибку."
        },
        "StrRealFixed": {
            "prefix": "f_StrRealFixed",
            "body": [
                "StrRealFixed(${1:arg1}, ${2:iNum})"
            ],
            "description": "Преобразует числовой аргумент в строку в формате действительного числа с фиксированным числом знаков в дробной части (с фиксированной точкой). Если аргумент не может быть преобразован к действительному числу с фиксированной точкой, функция выдает ошибку."
        },
        "TextInt": {
            "prefix": "f_TextInt",
            "body": [
                "TextInt(${1:arg}, ${2:gender})"
            ],
            "description": "Преобразует числовое значение аргумента в словесное строковое представление (только для русскоязычной версии). Округление исходного значения производится в меньшую сторону. Если аргумент не может быть преобразован к целому неотрицательному числу, функция выдает ошибку."
        },
        //## ############ ##
        //## Преобразование форматов и кодировок ##
        "Base64Decode": {
            "prefix": "f_Base64Decode",
            "body": [
                "Base64Decode(${1:str})"
            ],
            "description": "Декодирует данные из формата Base64. Возвращает строку, которая может содержать бинарные данные."
        },
        "Base64Encode": {
            "prefix": "f_Base64Encode",
            "body": [
                "Base64Encode(${1:str})"
            ],
            "description": "Преобразует (кодирует) строку в формат Base64. Возвращает строку в формате Base64."
        },
        "DecodeCharset": {
            "prefix": "f_DecodeCharset",
            "body": [
                "DecodeCharset(${1:str}, ${2:charset})"
            ],
            "description": "Преобразует строку из указанной кодировки в кодировку, используемую в программе по умолчанию. Возвращает строку в кодировке по умолчанию."
        },
        "EncodeCharset": {
            "prefix": "f_EncodeCharset",
            "body": [
                "EncodeCharset(${1:str}, ${2:charset})"
            ],
            "description": "Преобразует строку из кодировки, используемой в программе по умолчанию, в указанную кодировку. Возвращает строку в указанной кодировке."
        },
        "EncodeJson": {
            "prefix": "f_EncodeJson",
            "body": [
                "EncodeJson(${1:arg1})"
            ],
            "description": "Сериализация JavaScript-объекта (запись описания объекта в виде строки в формате JSON). Преобразует исходный объект в строку формата JSON. Действие функции обратно ParseJson."
        },
        "HexData": {
            "prefix": "f_HexData",
            "body": [
                "HexData(${1:arg})"
            ],
            "description": "Преобразует исходную строку в посимвольное шестнадцатеричное представление. Возвращает строку, содержащую шестнадцатеричное представление исходной строки."
        },
        "HtmlEncode": {
            "prefix": "f_HtmlEncode",
            "body": [
                "HtmlEncode(${1:str})"
            ],
            "description": "Преобразует текстовую строку в формат, используемый в HTML. В результате символы & , < и > заменяются на (&amp;), (&lt;) и (&gt;), а символ перевода строки - на <br>. Возвращает строку в формате HTML."
        },
        "HtmlEncodeDoc": {
            "prefix": "f_HtmlEncodeDoc",
            "body": [
                "HtmlEncodeDoc(${1:str})"
            ],
            "description": "Преобразует строку, содержащую обычный текст, в полный HTML-документ. Функция формирует завершенный HTML-документ, содержащий теги <html>, <body> и др. Возвращает строку, содержащую HTML-документ."
        },
        "HtmlToPlainText": {
            "prefix": "f_HtmlToPlainText",
            "body": [
                "HtmlToPlainText(${1:html})"
            ],
            "description": "Преобразует строку, содержащую текст в формате HTML, в обычный (неформатированный) текст. Функция удаляет теги и преобразует HTML-символы в обычные текстовые символы. Возвращает строку, содержащую неформатированный текст."
        },
        "MultipartFormEncode": {
            "prefix": "f_MultipartFormEncode",
            "body": [
                "MultipartFormEncode(${1:nameN}, ${2:valueN})"
            ],
            "description": "Формирует тело http-запроса для последующей отправки методом POST в формате multipart/form-data на основе набора пар данных объекта «имя атрибута - значение». Возвращает строку http-запроса в формате multipart/form-data. Пример: MultipartFormEncode('key', '2233','event_id', Int(34566));"
        },
        "ParseJson": {
            "prefix": "f_ParseJson",
            "body": [
                "ParseJson(${1:jsonString})"
            ],
            "description": "ParseJson – парсинг строки формата JSON (анализ и разбор строки и построение объекта по тому описанию, которое приведено в строке). Действие функции обратно EncodeJson."
        },
        "SqlLiteral": {
            "prefix": "f_SqlLiteral",
            "body": [
                "SqlLiteral(${1:arg})"
            ],
            "description": "Преобразует исходное значение в константу (литерал) языка запросов SQL. Возвращает строку. Значение типа null переводится в строку 'NULL', значение типа Строка заключается в одинарные кавычки, значение типа Целое число переводится в соответствующее строковое значение, значение типа Вещественное число не преобразуется, значение типа Дата переводится в строку с датой и временем в формате SQL."
        },
        "StrSimpleDecrypt": {
            "prefix": "f_StrSimpleDecrypt",
            "body": [
                "StrSimpleDecrypt(${1:str})"
            ],
            "description": "Дешифрует строку, зашифрованную встроенным алгоритмом. Возвращает строку в дешифрованном виде."
        },
        "StrSimpleEncrypt": {
            "prefix": "f_StrSimpleEncrypt",
            "body": [
                "StrSimpleEncrypt(${1:str})"
            ],
            "description": "Шифрует строку встроенным алгоритмом шифрования. Возвращает строку в зашифрованном виде."
        },
        "UrlDecode": {
            "prefix": "f_UrlDecode",
            "body": [
                "UrlDecode(${1:str})"
            ],
            "description": "Преобразует строку по стандартным правилам декодирования url, т.е. заменяет знак '%код' на соответствующий текстовый символ кириллицы. Возвращает строку с обычным текстом."
        },
        "UrlEncode": {
            "prefix": "f_UrlEncode",
            "body": [
                "UrlEncode(${1:str})"
            ],
            "description": "Преобразует исходную текстовую строку по стандартным правилам кодирования для использования в качестве параметра URL."
        },
        "UrlEncode16": {
            "prefix": "f_UrlEncode16",
            "body": [
                "UrlEncode16(${1:str})"
            ],
            "description": "Кодирует исходную текстовую строку для формирования параметра url, используя способ кодирования UTF-16."
        },
        "UrlEncodeQuery": {
            "prefix": "f_UrlEncodeQuery",
            "body": [
                "UrlEncodeQuery({'${1:nameN}': '${2:valueN}'})"
            ],
            "description": "Преобразует набор пар данных объекта 'имя атрибута - значение' в строку вида 'name1=value1&name2=value2&...' для использования в качестве запроса в составе url."
        },
        "UrlEncodeQueryExt": {
            "prefix": "f_UrlEncodeQueryExt",
            "body": [
                "UrlEncodeQueryExt({'${1:nameN}': '${2:valueN}'})"
            ],
            "description": "Преобразует набор пар данных объекта 'имя атрибута - значение' в строку вида 'name1=value1&name2=value2&...' в заданной кодировке для использования в качестве запроса в составе url."
        },
        "XmlAttrEncode": {
            "prefix": "f_XmlAttrEncode",
            "body": [
                "XmlAttrEncode(${1:str})"
            ],
            "description": "Преобразует аргумент для вставки в xml в качестве значения атрибута. В результате действия функции выполняется замена ряда символов аргумента: - символ перевода строки преобразуется в &#10; - символ табуляции – в &#09; - символ & - в &lt; - символ < - в &amp; - символ двойных кавычек - в &quot;"
        },
        "XmlStr": {
            "prefix": "f_XmlStr",
            "body": [
                "XmlStr(${1:tag}, ${2:str})"
            ],
            "description": "Добавляет к исходной строке xml-теги."
        },
        "XQueryLiteral": {
            "prefix": "f_XQueryLiteral",
            "body": [
                "XQueryLiteral(${1:arg})"
            ],
            "description": "Преобразует исходное значение в константу (литерал) языка запросов XQuery, соответствующую типу исходного значения. Значение типа null переводится в строку 'null()'. Значение типа Строка заключается в одинарные кавычки, при этом существующие одинарные кавычки внутри строки преобразуются в двойные кавычки в соответствии с правилами языка XQuery. Значения типов Целое число и Вещественное число переводятся в соответствующие строковые выражения. Значение типа Булево переводится в строку 'true()' или 'false()'. Значение типа Дата переводится в строку, содержащую дату и время в формате языка XQuery."
        },	
        //## ############ ##
        //## Работа со строками ##
        "StrBegins": {
            "prefix": "f_StrBegins",
            "body": [
                "StrBegins(${1:str1}, ${2:str2}, ${3:ignoreCase})"
            ],
            "description": "Производит проверку вхождения одной строки в начало другой строки (начинается ли строка 1 символами из строки 2)."
        },
        "StrCharCount": {
            "prefix": "f_StrCharCount",
            "body": [
                "StrCharCount(${1:str})"
            ],
            "description": "Возвращает количество символов в строке."
        },
        "StrCharRangePos": {
            "prefix": "f_StrCharRangePos",
            "body": [
                "StrCharRangePos(${1:str}, ${2:pos1}, ${3:pos2})"
            ],
            "description": "Возвращает часть строки от начального до конечного символа. Для определения части строки в байтах необходимо использовать функцию StrRangePos."
        },
        "StrContains": {
            "prefix": "f_StrContains",
            "body": [
                "StrContains(${1:str1}, ${2:str2}, ${3:ignoreCase})"
            ],
            "description": "Проверяет, содержит ли строка другую строку в качестве подстроки. Возвращаемое значение: true или false"
        },
        "StrEnds": {
            "prefix": "f_StrEnds",
            "body": [
                "StrEnds(${1:str1}, ${2:str2}, ${3:ignoreCase})"
            ],
            "description": "Производит проверку вхождения одной строки в конец другой строки (оканчивается ли строка 1 символами из строки 2). Возвращаемое значение: true или false"
        },
        "StrFromCharCode": {
            "prefix": "f_StrFromCharCode",
            "body": [
                "StrFromCharCode(${1:data})"
            ],
            "description": "Функция StrFromCharCode преобразует код символа (число) в строку, содержащую этот символ. Возвращаемое значение: строка"
        },
        "StrFromCharCodesArray": {
            "prefix": "f_StrFromCharCodesArray",
            "body": [
                "StrFromCharCodesArray(${1:arrData})"
            ],
            "description": "Функция StrFromCharCodesArray преобразует массив кодов в строку. Для каждого элемента массива чисел определяется соответствующий символ, и затем все символы объединяются в строку. Возвращаемое значение: строка"
        },
        "StrIsAlphaNum": {
            "prefix": "f_StrIsAlphaNum",
            "body": [
                "StrIsAlphaNum(${1:str})"
            ],
            "description": "Проверяет, состоит ли строка только из цифр или символов латинского алфавита. Возвращаемое значение: true или false"
        },
        "StrLeftCharRange": {
            "prefix": "f_StrLeftCharRange",
            "body": [
                "StrLeftCharRange(${1:str}, ${2:length})"
            ],
            "description": "Возвращает часть строки, длиной length символов, начиная с первого символа. Если второй аргумент больше количества символов в строке, то исходная строка возвращается полностью. Возвращаемое значение: строка"
        },
        "StrLeftRange": {
            "prefix": "f_StrLeftRange",
            "body": [
                "StrLeftRange(${1:str}, ${2:length})"
            ],
            "description": "Возвращает часть исходной строки str длиной length байтов, начиная с первого байта. Если второй аргумент больше длины исходной строки в байтах, то исходная строка возвращается полностью. Возвращаемое значение: строка"
        },
        "StrLen": {
            "prefix": "f_StrLen",
            "body": [
                "StrLen(${1:str})"
            ],
            "description": "Возвращает длину строки в байтах. Длина строки в байтах может быть больше количества символов, если программа использует кодировку UTF-8. Возвращаемое значение: целое число"
        },
        "StrLowerCase": {
            "prefix": "f_StrLowerCase",
            "body": [
                "StrLowerCase(${1:str})"
            ],
            "description": "Переводит все символы строки в нижний регистр. Возвращаемое значение: строка"
        },
        "StrMatchesMultiPattern": {
            "prefix": "f_StrMatchesMultiPattern",
            "body": [
                "StrMatchesMultiPattern(${1:str}, ${2:pattern})"
            ],
            "description": "Функция аналогична StrMatchesPattern, но может выполнять поиск по нескольким маскам, включенным в шаблон. Маски перечисляются в шаблоне через запятую. Маска поиска использует символы '*', заменяющие любое количество любых символов. Например, маске поиска 'aaa*bbb' соответствуют следующие сочетания символов в составе исходной строки: 'aaacccbbb', 'aaa bbb', 'aaaabcdebbb' и т.д. Возвращаемое значение: true или false"
        },
        "StrMatchesPattern": {
            "prefix": "f_StrMatchesPattern",
            "body": [
                "StrMatchesPattern(${1:str}, ${2:mask})"
            ],
            "description": "Проверяет, содержит ли строка другую строку в качестве подстроки с учетом маски поиска, использующей символы '*', которые заменяют любое количество любых символов. Например, маске поиска 'aaa*bbb' соответствуют следующие сочетания символов в составе исходной строки: 'aaacccbbb', 'aaa bbb', 'aaaabcdebbb' и т.д. Возвращаемое значение: true или false"
        },
        "StrNonTitleCase": {
            "prefix": "f_StrNonTitleCase",
            "body": [
                "StrNonTitleCase(${1:str})"
            ],
            "description": "Преобразует первую букву строки к нижнему регистру. Если строка уже приведена к описанному виду или если она не может быть приведена к такому виду, то строка возвращается без изменений. Возвращаемое значение: строка"
        },
        "StrOptScan": {
            "prefix": "f_StrOptScan",
            "body": [
                "StrOptScan(${1:str}, ${2:template})"
            ],
            "description": "Функция извлекает из исходной строки фрагменты в соответствии с заданным шаблоном. Если в исходной строке отсутствуют какие-либо фрагменты, соответствующие шаблону, функция возвращает значение undefined. Возвращаемое значение: массив строк или undefined"
        },
        "StrRangePos": {
            "prefix": "f_StrRangePos",
            "body": [
                "StrRangePos(${1:str}, ${2:pos1}, ${3:pos2})"
            ],
            "description": "Возвращает часть строки от начального до конечного байта. Примечание: длина строки в байтах может быть больше количества символов, если программа использует кодировку UTF-8. Возвращаемое значение: строка, содержащая часть исходной строки от начального до конечного байта."
        },
        "StrReplace": {
            "prefix": "f_StrReplace",
            "body": [
                "StrReplace(${1:str}, ${2:subStr}, ${3:newSubStr})"
            ],
            "description": "Заменяет все вхождения одной подстроки на другую в исходной строке, если такие вхождения имеются. Возвращаемое значение: измененная строка."
        },
        "StrReplaceOne": {
            "prefix": "f_StrReplaceOne",
            "body": [
                "StrReplaceOne(${1:str}, ${2:subStr}, ${3:newSubStr})"
            ],
            "description": "Заменяет первое вхождение одной подстроки на другую в исходной строке, если такие вхождения имеются. Возвращаемое значение: измененная строка."
        },
        "StrRightRangePos": {
            "prefix": "f_StrRightRangePos",
            "body": [
                "StrRightRangePos(${1:str}, ${2:pos})"
            ],
            "description": "Возвращает часть исходной строки, начиная с указанного байта. Примечание - Длина строки в байтах может быть больше количества символов, если программа использует кодировку UTF-8. Возвращаемое значение: измененная строка."
        },
        "StrScan": {
            "prefix": "f_StrScan",
            "body": [
                "StrScan(${1:str}, ${2:template})"
            ],
            "description": "Извлекает из исходной строки фрагменты в соответствии с заданным шаблоном. Шаблоны могут содержать элементы: %s - вхождение подстроки (возвращаемое); %*s - вхождение подстроки (невозвращаемое). Если какие-либо фрагменты, соответствующие шаблону, в исходной строке отсутствуют, функция возвращает ошибку с прерыванием выполняемого кода. Возвращает массив строк, элементами которого являются отобранные фрагменты исходной строки."
        },
        "StrSplitToLines": {
            "prefix": "f_StrSplitToLines",
            "body": [
                "StrSplitToLines(${1:str})"
            ],
            "description": "Преобразует строку в массив абзацев, разделенных символами '\\n'. Возвращает массив строк, каждый элемент которого является абзацем из исходной строки."
        },
        "StrTitleCase": {
            "prefix": "f_StrTitleCase",
            "body": [
                "StrTitleCase(${1:str})"
            ],
            "description": "Преобразует первую букву строки в заглавную. Если строка уже приведена к описанному виду или если она не может быть приведена к такому виду, то строка возвращается без изменений. Примечание – В ряде версий (например, 2019.2.3) функция StrTitleCase преобразует к нижнему регистру все строковые символы, кроме первого. Возвращает строку, первый символ которой преобразован к верхнему регистру, а остальные символы – к нижнему регистру."
        },
        "StrToCharArray": {
            "prefix": "f_StrToCharArray",
            "body": [
                "StrToCharArray(${1:str})"
            ],
            "description": "Функция StrToCharArray преобразует строку в массив символов (по одному символу в каждом элементе массива). Возвращает массив символов, где каждый элемент массива представляет собой один символ из исходной строки."
        },
        "StrToCharCodesArray": {
            "prefix": "f_StrToCharCodesArray",
            "body": [
                "StrToCharCodesArray(${1:str})"
            ],
            "description": "Функция StrToCharCodesArray преобразует строку в массив кодов символов (строка разбивается на символы, по каждому из которых определяется соответствующий код CharCode). Возвращает массив целых чисел, представляющих коды символов, из которых состоит исходная строка."
        },
        "StrUpperCase": {
            "prefix": "f_StrUpperCase",
            "body": [
                "StrUpperCase(${1:str})"
            ],
            "description": "Функция StrUpperCase переводит все символы строки в верхний регистр. Возвращает строку, преобразованную к верхнему регистру."
        },
        "Trim": {
            "prefix": "f_Trim",
            "body": [
                "Trim(${1:str})"
            ],
            "description": "Функция Trim удаляет символы пробела, перевода строк и табуляции в начале и в конце исходной строки. Возвращает копию исходной строки, из которой удалены указанные символы в начале и в конце."
        },
        "UnifySpaces": {
            "prefix": "f_UnifySpaces",
            "body": [
                "UnifySpaces(${1:str})"
            ],
            "description": "Заменяет повторяющиеся последовательности символов пробела, перевода строк и табуляции в строке на одиночные пробелы. Если указанные повторяющиеся последовательности символов в исходной строке отсутствуют, то функция возвращает исходную строку без изменения."
        },
        //## ############ ##
        //## Работа с датами ##
        "Date": {
            "prefix": "f_Date",
            "body": [
                "Date(${1:str})"
            ],
            "description": "Преобразует строку, содержащую дату или дату и время, в объект типа Дата (это специальный объект (структура) даты).Если исходная строка содержит данные, отличные от указанных, то функция возвращает ошибку с прерыванием выполняемого кода.Если аргумент не указан, то функция возвращает текущую дату.Если аргумент содержит данное типа Дата, то функция возвращает его без изменений.Возвращаемое значение: Тип: Объект типа Дата."
        },
        "DateDiff": {
            "prefix": "f_DateDiff",
            "body": [
                "DateDiff(${1:date1}, ${2:date2})"
            ],
            "description": "Возвращает разность между первой и второй датами в секундах.Возвращаемое значение: Тип: Целое число. Разность между первой и второй датами в секундах."
        },
        "DateNewTime": {
            "prefix": "f_DateNewTime",
            "body": [
                "DateNewTime(${1:date}, ${2:hours}, ${3:minutes}, ${4:seconds})"
            ],
            "description": "Изменяет исходную дату с учетом заданного времени (часов, минут и секунд). Если указан только первый аргумент, функция возвращает дату без указания времени.Возвращаемое значение: Тип: Дата. Измененная дата. При наличии аргументов «hours, minutes» или «hours, minutes, seconds» функция возвращает исходную дату с учетом заданного времени (часов, минут и секунд)."
        },
        "DateOffset": {
            "prefix": "f_DateOffset",
            "body": [
                "DateOffset(${1:date}, ${2:seconds})"
            ],
            "description": "Сдвигает дату на указанное число секунд. Если значение второго аргумента отрицательное, дата сдвигается назад. Примечание. Для информации - 1 сутки = 86400 секунд; 1 час = 3600 секунд; 1 минута = 60 секунд.Возвращаемое значение: Тип: Дата. Измененная дата."
        },
        "DateToRawSeconds": {
            "prefix": "f_DateToRawSeconds",
            "body": [
                "DateToRawSeconds(${1:date})"
            ],
            "description": "Возвращает количество секунд, прошедших с даты '01.01.1970 03:00:00', до заданной даты.Пример: A1 = Date ('01.01.1970 03:00:10'); A2 = DateToRawSeconds (A1); alert (A2); // возвращает число 10"
        },
        "Day": {
            "prefix": "f_Day",
            "body": [
                "Day(${1:date})"
            ],
            "description": "Возвращает номер дня в месяце (от 1 до 31) для заданной даты.Возвращаемое значение: Тип: Целое число. Номер дня (от 1 до 31)."
        },
        "GetCurTicks": {
            "prefix": "f_GetCurTicks",
            "body": [
                "GetCurTicks()"
            ],
            "description": "Функция вызывается без аргументов. Возвращает время в миллисекундах, прошедшее с момента запуска операционной системы.Возвращаемое значение: Тип: Целое число. Время в миллисекундах от момента запуска операционной системы."
        },
        "Hour": {
            "prefix": "f_Hour",
            "body": [
                "Hour(${1:date})"
            ],
            "description": "Возвращает количество часов (от 0 до 23) в заданной дате. Если дата не содержит времени, то функция возвращает значение undefined.Возвращаемое значение: Тип: Целое число. Количество часов (от 0 до 23). Если дата не содержит времени, то функция возвращает значение undefined."
        },
        "Minute": {
            "prefix": "f_Minute",
            "body": [
                "Minute(${1:date})"
            ],
            "description": "Возвращает количество минут (от 0 до 59) для заданной даты. Если дата не содержит времени, то функция возвращает значение undefined.Возвращаемое значение: Тип: Целое число. Количество минут (от 0 до 59). Если дата не содержит времени, то функция возвращает значение undefined."
        },
        "Month": {
            "prefix": "f_Month",
            "body": [
                "Month(${1:date})"
            ],
            "description": "Возвращает номер месяца в году (от 1 до 12) для заданной даты.Возвращаемое значение: Тип: Целое число. Номер дня (от 1 до 12)."
        },
        "OptDate": {
            "prefix": "f_OptDate",
            "body": [
                "OptDate(${1:year}, ${2:month}, ${3:day}, ${4:hours}, ${5:minutes}, ${6:seconds})"
            ],
            "description": "Преобразует строку, содержащую дату или дату и время, в объект типа Дата.Данная функция аналогична функции Date, но имеет перед функцией Date ряд преимуществ:1) В случае, если указаны недопустимые аргументы, функция возвращает значение undefined.2) Функция OptDate() проверяет корректность даты (например, 29 февраля). Допустимые варианты использования:OptDate ( 2019, 04, 20 )OptDate ( 2019, 04, 20, 12, 30 )OptDate ( 2019, 04, 20, 12, 30, 0 ) Если аргумент не указан, то функция возвращает текущую дату.Если аргумент содержит данное типа Дата, то функция возвращает его без изменений.Возвращаемое значение: Тип: Дата."
        },
        "ParseDate": {
            "prefix": "f_ParseDate",
            "body": [
                "ParseDate(${1:str})"
            ],
            "description": "Преобразует строку, содержащую дату или дату и время, в значение типа Дата.Данная функция аналогична функции Date, но преобразует строку не в объект (структуру), а в значение типа Дата.В отличие от функции Date данная функция принимает в качестве аргумента дату со словесным указанием месяца, например, '1 ноября 2011 года' Допустимые варианты использования:ParseDate ('1 ноября 2011 года')ParseDate ('01.11.2011')ParseDate ('2011-11-01')Возвращаемое значение: Тип: Дата."
        },
        "RawSecondsToDate": {
            "prefix": "f_RawSecondsToDate",
            "body": [
                "RawSecondsToDate(${1:seconds})"
            ],
            "description": "Преобразует количество секунд, прошедших с даты '01.01.1970 03:00:00', в результирующую дату.Возвращаемое значение: Тип: Дата. Результирующая дата."
        },
        "Second": {
            "prefix": "f_Second",
            "body": [
                "Second(${1:date})"
            ],
            "description": "Возвращает количество секунд (от 0 до 59) для заданной даты. Если дата не содержит времени, то функция возвращает значение 0.Возвращаемое значение: Тип: Целое число. Количество секунд (от 0 до 59). Если дата не содержит времени, то функция возвращает значение 0."
        },
        "StrDate": {
            "prefix": "f_StrDate",
            "body": [
                "StrDate(${1:date}, ${2:showTime}, ${3:showSeconds})"
            ],
            "description": "Преобразует дату в строку в формате, используемом по умолчанию в операционной системе.Если в качестве аргумента передается null или пустая строка, функция возвращает пустую строку.Возвращаемое значение: Тип: Строка. Строка, содержащая исходную дату."
        },
        "StrLongDate": {
            "prefix": "f_StrLongDate",
            "body": [
                "StrLongDate(${1:date})"
            ],
            "description": "Преобразует дату в строку в «длинном» формате (со словесной формой отображения месяца).Если в качестве аргумента передается null или пустая строка, функция возвращает пустую строку.Возвращаемое значение: Тип: Строка. Строка, содержащая исходную дату в «длинном» формате."
        },
        "StrMimeDate": {
            "prefix": "f_StrMimeDate",
            "body": [
                "StrMimeDate(${1:date})"
            ],
            "description": "Преобразует дату в формат MIME.Возвращаемое значение: Тип: Дата. Исходная дата в формат MIME."
        },
        "StrShortDate": {
            "prefix": "f_StrShortDate",
            "body": [
                "StrShortDate(${1:date})"
            ],
            "description": "Преобразует дату в строку в «коротком» формате (с двухсимвольным отображением года).Возвращаемое значение: Тип: Строка. Строка, содержащая исходную дату с двухсимвольным отображением года."
        },
        "StrTime": {
            "prefix": "f_StrTime",
            "body": [
                "StrTime(${1:date})"
            ],
            "description": "Выделяет время (количество часов и минут) из исходной даты в строковое выражение.Если в дате время не указывается или в качестве аргумента передается null или пустая строка, функция возвращает пустую строку.Возвращаемое значение: Тип: Строка. Строка, содержащая время, выделенное из исходной даты."
        },
        "StrXmlDate": {
            "prefix": "f_StrXmlDate",
            "body": [
                "StrXmlDate(${1:date})"
            ],
            "description": "Преобразует дату в строку в формате XML (данный формат не зависит от региональных настроек в системе).Если в качестве аргумента передается null или пустая строка, функция возвращает пустую строку.Возвращаемое значение: Тип: Строка. Строка, содержащая исходную дату в формате XML."
        },
        "UtcToLocalDate": {
            "prefix": "f_UtcToLocalDate",
            "body": [
                "UtcToLocalDate(${1:date})"
            ],
            "description": "Преобразует дату из Всемирного координированного времени в местное время.Если в качестве аргумента передается null или пустая строка, функция возвращает пустую строку.Возвращаемое значение: Тип: Строка. Строка, содержащая исходную дату."
        },
        "WeekDay": {
            "prefix": "f_WeekDay",
            "body": [
                "WeekDay(${1:date})"
            ],
            "description": "Возвращает номер дня недели (от 0 до 6) для заданной даты (0 - воскресенье, 1 - понедельник и т.д.).Возвращаемое значение: Тип: Целое число. Номер дня недели (от 0 до 6)."
        },
        "Year": {
            "prefix": "f_Year",
            "body": [
                "Year(${1:date})"
            ],
            "description": "Возвращает номер года для заданной даты.Возвращаемое значение: Тип: Целое число. Номер года."
        },
        //## ############ ##
        //## Работа с массивами ##
        "ArrayCount": {
            "prefix": "f_ArrayCount",
            "body": [
                "ArrayCount(${1:array})"
            ],
            "description": "Возвращает количество элементов массива.Примечание - Для массивов прямого доступа функция срабатывает мгновенно, для сложных массивов (например, результатов XQuery) вызов этой функции может повлечь за собой обращение к серверу либо другую длительную по времени операцию, поэтому не следует использовать данную функцию внутри циклов.Возвращаемое значение: Тип: Целое число. Количество элементов исходного массива."
        },
        "ArrayDirect": {
            "prefix": "f_ArrayDirect",
            "body": [
                "ArrayDirect(${1:array})"
            ],
            "description": "Преобразует заданный массив в массив прямого доступа (с прямым индексированием).Если заданный массив и так поддерживает прямое индексирование, функция возвращает сам исходный массив. В противном случае функция работает аналогично ArraySelectAll и возвращает массив, содержащий копию исходного массива.Возвращаемое значение: Тип: Массив. Массив прямого доступа."
        },
        "ArrayExtract": {
            "prefix": "f_ArrayExtract",
            "body": [
                "ArrayExtract(${1:array}, ${2:fieldExpr})"
            ],
            "description": "Выбирает значение определенного поля (атрибута) из каждого элемента массива и возвращает новый массив той же длины, содержащий выбранные значения.Возвращаемое значение: Тип: Массив. Массив, содержащий выбранные значения."
        },
        "ArrayExtractKeys": {
            "prefix": "f_ArrayExtractKeys",
            "body": [
                "ArrayExtractKeys(${1:array}, ${2:field})"
            ],
            "description": "Выбирает значение определенного поля (атрибута) из каждого элемента массива. Возвращает новый массив той же длины, содержащий выбранные значения.Функция аналогична более универсальной функции ArrayExtract, но работает быстрее.Возвращаемое значение: Тип: Массив. Массив, содержащий выбранные значения."
        },
        "ArrayFind": {
            "prefix": "f_ArrayFind",
            "body": [
                "ArrayFind(${1:array}, ${2:qualExpr})"
            ],
            "description": "Находит первый элемент массива, удовлетворяющий заданному условию.Если элемент, удовлетворяющий условию, не найден, функция завершается с исключением.Возвращаемое значение: Тип: Элемент массива. Отобранный элемент массива."
        },
        "ArrayFirstElem": {
            "prefix": "f_ArrayFirstElem",
            "body": [
                "ArrayFirstElem(${1:array})"
            ],
            "description": "Возвращает первый элемент заданного массива.Если массив не содержит ни одного элемента, функция завершается с исключением.Возвращаемое значение: Тип: Элемент массива. Отобранный элемент массива."
        },
        "ArrayIntersect": {
            "prefix": "f_ArrayIntersect",
            "body": [
                "ArrayIntersect(${1:array1}, ${2:array2}, ${3:fieldExpr1}, ${4:fieldExpr2})"
            ],
            "description": "Возвращает массив, содержащий элементы массива 1, у которых значение ключевого поля совпадает хотя бы с одним элементом массива 2.Примечание - Порядок следования элементов в возвращаемом массиве не определен. Если в массиве 1 есть элементы с одинаковым значением ключевого поля, то попадание в возвращаемый массив всех таких элементов не гарантируется. Гарантированно в возвращаемый массив попадут элементы с дублирующимся ключом в количестве, в каком элементы с этим же ключом присутствуют в массиве 2.Возвращаемое значение: Тип: Массив. Результирующий массив."
        },
        "ArrayMax": {
            "prefix": "f_ArrayMax",
            "body": [
                "ArrayMax(${1:array}, ${2:elemExpr})"
            ],
            "description": "Возвращает элемент заданного массива, соответствующий максимальному значению по определенному критерию.Если массив не содержит ни одного элемента, функция завершается с исключением.Возвращаемое значение: Тип: Элемент массива. Отобранный элемент массива."
        },
        "ArrayMerge": {
            "prefix": "f_ArrayMerge",
            "body": [
                "ArrayMerge(${1:array}, ${2:elemExpr}, ${3:delim})"
            ],
            "description": "Возвращает строку, полученную путем соединения (склеивания) данных из элементов массива.Возвращаемое значение: Тип: Строка. Строковое выражение, полученное путем соединения данных из элементов массива."
        },
        "ArrayMin": {
            "prefix": "f_ArrayMin",
            "body": [
                "ArrayMin(${1:array}, ${2:elemExpr})"
            ],
            "description": "Возвращает элемент заданного массива, соответствующий минимальному значению по определенному критерию.Если массив не содержит ни одного элемента, функция завершается с исключением.Возвращаемое значение: Тип: Элемент массива. Отобранный элемент массива."
        },
        "ArrayOptFind": {
            "prefix": "f_ArrayOptFind",
            "body": [
                "ArrayOptFind(${1:array}, ${2:qualExpr})"
            ],
            "description": "Находит первый элемент массива, удовлетворяющий заданному условию.Если элемент, удовлетворяющий условию, не найден, возвращается undefined.Возвращаемое значение: Тип: Элемент массива. Отобранный элемент массива."
        },
        "ArrayOptFindByKey": {
            "prefix": "f_ArrayOptFindByKey",
            "body": [
                "ArrayOptFindByKey(${1:array}, ${2:keyValue}, ${3:keyName})"
            ],
            "description": "Ищет первый элемент массива с заданным значением определенного поля (ключа).Если элемент, удовлетворяющий условию, не найден, возвращается undefined.Возвращаемое значение: Тип: Элемент массива. Отобранный элемент массива."
        },
        "ArrayOptFindBySortedKey": {
            "prefix": "f_ArrayOptFindBySortedKey",
            "body": [
                "ArrayOptFindBySortedKey(${1:array}, ${2:keyValue}, ${3:keyName})"
            ],
            "description": "Ищет первый элемент массива с заданным значением определенного поля (ключа).Если элемент, удовлетворяющий условию, не найден, возвращается undefined.Предполагается, что массив предварительно отсортирован по ключевому полю по возрастанию, что значительно повышает скорость поиска по сравнению с функцией ArrayOptFindByKey. Функцию имеет смысл использовать для частого поиска в каком-либо фиксированном справочнике большого размера, который необходимо заранее отсортировать.Если исходный массив не был отсортирован по ключу, то исполняемый код может прервать работу и выдать сообщение об ошибке.Возвращаемое значение: Тип: XML объект (Элемент массива)."
        },
        "ArrayOptFirstElem": {
            "prefix": "f_ArrayOptFirstElem",
            "body": [
                "ArrayOptFirstElem(${1:array}, ${2:value})"
            ],
            "description": "Возвращает первый элемент заданного массива или второй аргумент, если массив пустой. Если массив не содержит ни одного элемента, функция а второй аргумент отсутствует, то функция возвращает undefined. Если массив-аргумент отсутствует или не определен (undefined), то выдается ошибка с остановкой выполнения кода.Возвращаемое значение: Тип: Элемент массива или др. Отобранный элемент массива или значение аргумента <value>."
        },
        "ArrayOptMax": {
            "prefix": "f_ArrayOptMax",
            "body": [
                "ArrayOptMax(${1:array}, ${2:elemExpr})"
            ],
            "description": "Возвращает элемент заданного массива, соответствующий максимальному значению по определенному критерию.Если массив не содержит ни одного элемента, функция возвращает undefined.Возвращаемое значение: Тип: Элемент массива. Отобранный элемент массива."
        },
        "ArrayOptMin": {
            "prefix": "f_ArrayOptMin",
            "body": [
                "ArrayOptMin(${1:array}, ${2:elemExpr})"
            ],
            "description": "Возвращает элемент заданного массива, соответствующий минимальному значению по определенному критерию.Если массив не содержит ни одного элемента, функция возвращает undefined.Возвращаемое значение: Тип: Элемент массива. Отобранный элемент массива."
        },
        "ArrayRange": {
            "prefix": "f_ArrayRange",
            "body": [
                "ArrayRange(${1:array}, ${2:pos}, ${3:elemsNum})"
            ],
            "description": "Возвращает фрагмент массива, начиная с определенной позиции (номера элемента массива).Данная функция как правило используется для реализации постраничного просмотра (paging) результатов запроса XQuery.Возвращаемое значение: Тип: Массив. Массив, содержащий выбранные значения."
        },
        "ArraySelect": {
            "prefix": "f_ArraySelect",
            "body": [
                "ArraySelect(${1:array}, ${2:qualExpr})"
            ],
            "description": "Выбирает элементы массива, удовлетворяющие заданному критерию.Возвращаемое значение: Тип: Массив. Массив, содержащий выбранные значения."
        },
        "ArraySelectAll": {
            "prefix": "f_ArraySelectAll",
            "body": [
                "ArraySelectAll(${1:array})"
            ],
            "description": "Возвращает массив, содержащий все элементы исходного массива в виде массива с прямым доступом.Функция, как правило, используется в двух случаях:1. Для сложной либо многократной обработки (особенно с прямым индексированием) 'медленных' массивов, таких как результаты XQuery.2. Когда в цикле, осуществляющем проход по массиву, происходит выборочное удаление его элементов.Примечание - В целях избежания переполнения памяти не рекомендуется использовать функцию ArraySelectAll для массивов с количеством элементов более 1000.Возвращаемое значение: Тип: Массив. Результирующий массив."
        },
        "ArraySelectByKey": {
            "prefix": "f_ArraySelectByKey",
            "body": [
                "ArraySelectByKey(${1:array}, ${2:keyValue}, ${3:keyName})"
            ],
            "description": "Выбирает элементы массива с определенным значением заданного поля (ключа).Функция аналогична более универсальной функции ArraySelect, но работает быстрее.Возвращаемое значение: Тип: Массив. Массив, содержащий выбранные значения."
        },
        "ArraySelectBySortedKey": {
            "prefix": "f_ArraySelectBySortedKey",
            "body": [
                "ArraySelectBySortedKey(${1:array}, ${2:keyValue}, ${3:keyName})"
            ],
            "description": "Выбирает элементы массива, с определенным значением заданного поля. Массив должен быть предварительно отсортирован по возрастанию значения данного поля, что делает эту функцию существенно быстрее по сравнению с ArraySelectByKey.Возвращаемое значение: Тип: Массив. Массив, содержащий выбранные значения."
        },
        "ArraySelectDistinct": {
            "prefix": "f_ArraySelectDistinct",
            "body": [
                "ArraySelectDistinct(${1:array}, ${2:fieldExpr})"
            ],
            "description": "Возвращает массив уникальных значений полей элементов заданного массива.Возвращаемое значение: Тип: Массив. Массив, содержащий выбранные значения."
        },
        "ArraySort": {
            "prefix": "f_ArraySort",
            "body": [
                "ArraySort(${1:array}, ${2:elemExpr1}, ${3:order1}, ${4:elemExpr1}, ${5:order2})"
            ],
            "description": "Сортирует массив по заданным полям. Возвращает новый массив отсортированных значений. Функция требует нечетного числа аргументов (не менее 3-х), для каждого нового уровня сортировки добавляется два новых аргумента.Возвращаемое значение: Тип: Массив. Отсортированный массив."
        },
        "ArraySum": {
            "prefix": "f_ArraySum",
            "body": [
                "ArraySum(${1:array}, ${2:elemExpr})"
            ],
            "description": "Внимание - Данная функция работает только с массивом объектов. Возвращает сумму числовых значений определенного поля по всем элементам массива объектов.Если значение поля не является числовым, выдается сообщение об ошибке 'Element value is not numeric...' с прерыванием выполнения программного кода.Внимание - Данная функция работает только с массивом объектов.Возвращаемое значение: Тип: Целое или вещественное число. Сумма значений определенного числового поля по всем элементам массива объектов."
        },
        "ArrayUnion": {
            "prefix": "f_ArrayUnion",
            "body": [
                "ArrayUnion(${1:array1}, ${2:array2}, ${3:arrayN})"
            ],
            "description": "Последовательное объединение нескольких массивов в один. Функция не контролирует повторяемость элементов результирующего массива.Возвращаемое значение: Тип: Массив. Результирующий объединенный массив."
        },
        "IsArray": {
            "prefix": "f_IsArray",
            "body": [
                "IsArray(${1:arg})"
            ],
            "description": "Проверяет, является ли аргумент массивом.Возвращаемое значение: Тип: Булево. Возвращает значение, показывающее, является ли аргумент массивом (true – аргумент является массивом, false – аргумент не является массивом)."
        },
        //## ############ ##
    //# ############## #
    
    


    "ObtainChildByKey": {
        "prefix": "f_ObtainChildByKey",
        "body": [
            "custom_elems.ObtainChildByKey('${1:sChildElemName}').value"
        ],
        "description": "Проверяет наличие элемента с указанным ключем и добавляет таковой в случае его отсутствия (Используется в основном чтобы записать значение в дочерний элемент / кастомное поле)"
    },
    "GetOptChildByKey": {
        "prefix": "f_GetOptChildByKey",
        "body": [
            "custom_elems.GetOptChildByKey('${1:sChildElemName}', ${2:defaultVal}).value"
        ],
        "description": "Получить значение дочернего элемента / кастомного поля по ключу"
    },
    //# ############## #
    //# tools #
    "tools.object_to_text": {
        "prefix": "t_ObjToTxt",
        "body": [
            "tools.object_to_text(${1:object}, 'json')"
        ],
        "description": "Преобразует массив или объект в строку"
    },
    "tools.create_notification": {
        "prefix": "t_CreateNotif",
        "body": [
            "tools.create_notification('${1:sCodeTypeNotif}', ${2:iPersonID}, '${3:sTextNotif}', ${4:iSecondObjectID})"
        ],
        "description": "Создает новое неотправленное уведомление"
    },
    "tools_web.get_web_param": {
        "prefix": "t_w_GetWebParam",
        "body": [
            "tools_web.get_web_param(curParams, '${1:sWebParam}', '', true)"
        ],
        "description": "Получаем значение из переменной шаблона/раздела портала"
    },
    "tools.open_doc": {
        "prefix": "t_OpenDoc",
        "body": [
            "tools.open_doc(${1:iDocID})"
        ],
        "description": "Открывает XML-документ по указанному ID объекта"
    },
    "tools.read_object": {
        "prefix": "t_ReadObj",
        "body": [
            "tools.read_object(${1:sObj})"
        ],
        "description": "Преобразует строку в формате json в объект"
    },
    "tools.call_code_library_method": {
        "prefix": "t_CallLib",
        "body": [
            "tools.call_code_library_method('${1:sCodeLib}', '${2:sMethodName}', [${3:Param1}, ${4:Param2}])"
        ],
        "description": "Вызов метода из библиотеки программного кода"
    },
    //# ############## #
    //# XAML #
    "htmlbox": {
        "prefix": "xaml_HtmlBox",
        "body": [
            "HTMLBox Dynamic=\"true\">",
            "	<![CDATA[",
            "		$1",
            "	]]>",
            "</HTMLBox>"
        ],
        "description": "XAML разметка, Отображает HTML код"
    },
    //# ############## #
    //# Other WT #
    "wt_sql_request": {
        "prefix": "wt_SqlRequest",
        "body": [
            "${1:sSqlReq} = \"",
            "	$2",
            "\";",
            "${3:arrResult} = ArraySelectAll(XQuery(\"sql: \" + ${1:sSqlReq}));"
        ],
        "description": "Конструкция для SQL запроса"
    },
    "wt_forin": {
        "prefix": "wt_forin",
        "body": [
            "for (${2:arrElem} in ${1:arrResult}) ",
            "{",
            "	$3",
            "}"
        ],
        "description": "Конструкция for in"
    },
    "TopElem": {
        "prefix": "wt_TopElem",
        "body": [
            "${2:doc} = tools.open_doc(${1:iDocID});",
            "${3:teDoc} = ${2:doc}.TopElem;"
        ],
        "description": "Возвращает корневой элемент в документе"
    }
    //# ############## #
}
